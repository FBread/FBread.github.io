<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>面包土豆西红柿的博客</title>
  
  <subtitle>去火星看日出</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-31T01:31:50.785Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>FBread</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/07/hello-world/"/>
    <id>http://yoursite.com/2019/11/07/hello-world/</id>
    <published>2019-11-07T06:43:59.149Z</published>
    <updated>2019-10-31T01:31:50.785Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>常用网址1</title>
    <link href="http://yoursite.com/2019/11/07/%E5%B8%B8%E7%94%A8%E7%BD%91%E5%9D%801/"/>
    <id>http://yoursite.com/2019/11/07/常用网址1/</id>
    <published>2019-11-07T02:12:45.000Z</published>
    <updated>2019-11-07T02:13:11.623Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>spring cloud的视频 驰狼 ： <a href="http://chilangedu.com" target="_blank" rel="noopener">http://chilangedu.com</a><br>spring cloud zull间书：<a href="https://springcloud.cc/spring-cloud-netflix.html" target="_blank" rel="noopener">https://springcloud.cc/spring-cloud-netflix.html</a><br>spring cloud 整合mybatis ： <a href="https://blog.csdn.net/ylimh_hmily/article/details/78287373" target="_blank" rel="noopener">https://blog.csdn.net/ylimh_hmily/article/details/78287373</a><br>前端自动生成的模板：<a href="https://alibaba.github.io/ice/" target="_blank" rel="noopener">https://alibaba.github.io/ice/</a><br>swagger扩展版本：<a href="http://www.sosoapi.com/pass/help/manual.htm" target="_blank" rel="noopener">http://www.sosoapi.com/pass/help/manual.htm</a><br>spring boot 源码： <a href="https://gitee.com/didispace/SpringBoot-Learning" target="_blank" rel="noopener">https://gitee.com/didispace/SpringBoot-Learning</a><br>dubbo-admin的git网址：<a href="https://github.com/apache/incubator-dubbo-ops.git" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo-ops.git</a><br>zookeeper的底层实现原理：<a href="http://cailin.iteye.com/blog/2014486/" target="_blank" rel="noopener">http://cailin.iteye.com/blog/2014486/</a><br>springcloud博客地址：<a href="https://blog.csdn.net/forezp/article/details/70148833" target="_blank" rel="noopener">https://blog.csdn.net/forezp/article/details/70148833</a><br>在线画图工具：<a href="https://www.processon.com/diagraming/5ac80169e4b09bf96adfb2a1" target="_blank" rel="noopener">https://www.processon.com/diagraming/5ac80169e4b09bf96adfb2a1</a><br>设计模式学习:<a href="https://ke.qq.com/course/149432" target="_blank" rel="noopener">https://ke.qq.com/course/149432</a><br>关于多态的理解:<a href="https://www.cnblogs.com/mz-lover/p/4786337.html" target="_blank" rel="noopener">https://www.cnblogs.com/mz-lover/p/4786337.html</a><br>镜像文件下载：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a><br>nmmare安装centos系统：<a href="https://jingyan.baidu.com/article/eae0782787b4c01fec548535.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/eae0782787b4c01fec548535.html</a><br>重装win7系统(全文搜索撸字即可找到):<a href="https://www.zhihu.com/question/23042197" target="_blank" rel="noopener">https://www.zhihu.com/question/23042197</a><br>vmmare的免费注册码:<a href="http://www.zdfans.com/5928.html" target="_blank" rel="noopener">http://www.zdfans.com/5928.html</a><br>CentOS 7 开放防火墙端口命令: <a href="http://blog.csdn.net/achang21/article/details/52538049" target="_blank" rel="noopener">http://blog.csdn.net/achang21/article/details/52538049</a><br>Windows下使用VNC连接CentOS7远程桌面:<a href="http://blog.csdn.net/sheen1991/article/details/47749441" target="_blank" rel="noopener">http://blog.csdn.net/sheen1991/article/details/47749441</a><br>CentOS7.1安装VNC，让Win7远程桌面Linux: <a href="http://www.linuxidc.com/Linux/2017-05/143346.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2017-05/143346.htm</a><br>nginx的使用教程:<a href="http://www.cnblogs.com/jingmoxukong/p/5945200.html" target="_blank" rel="noopener">http://www.cnblogs.com/jingmoxukong/p/5945200.html</a><br>maven+spring mvc+mybaties+mysql环境搭建  <a href="http://blog.csdn.net/huaishuming/article/details/50751935" target="_blank" rel="noopener">http://blog.csdn.net/huaishuming/article/details/50751935</a><br>idea导入web项目教程博客:<a href="http://www.cnblogs.com/1540340840qls/p/6529675.html" target="_blank" rel="noopener">http://www.cnblogs.com/1540340840qls/p/6529675.html</a><br>mySQl的安装教程:<a href="http://www.cnblogs.com/sshoub/p/4321640.html" target="_blank" rel="noopener">http://www.cnblogs.com/sshoub/p/4321640.html</a></p><p>angular的网址:<a href="http://www.hubwiz.com/class/5599d367a164dd0d75929c76" target="_blank" rel="noopener">http://www.hubwiz.com/class/5599d367a164dd0d75929c76</a><br>下拉加载博客文档:<a href="http://blog.csdn.net/mr_smile2014/article/details/52172169" target="_blank" rel="noopener">http://blog.csdn.net/mr_smile2014/article/details/52172169</a><br>dubbo的项目视频:<a href="http://www.roncoo.com/course/view/f614343765bc4aac8597c6d8b38f06fd" target="_blank" rel="noopener">http://www.roncoo.com/course/view/f614343765bc4aac8597c6d8b38f06fd</a></p><p>11.idea的激活网址:　　<br><a href="http://ideaserver.suroot.win" target="_blank" rel="noopener">http://ideaserver.suroot.win</a></p><p>Navicat Premium 破解攻略: <a href="http://blog.csdn.net/fanrongwoaini/article/details/73177683" target="_blank" rel="noopener">http://blog.csdn.net/fanrongwoaini/article/details/73177683</a></p><hr><p>%3A为:号<br>%2F为/号<br>微信的开发文档:<a href="https://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki/11/74ad127cc054f6b80759c40f77ec03db.html</a><br>微信第三方开发文档(全网发布):<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419318459&amp;lang=zh_CN" target="_blank" rel="noopener">https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419318459&amp;lang=zh_CN</a><br>开发文档博客:<a href="http://blog.csdn.net/zhaojiacan/article/details/51024944" target="_blank" rel="noopener">http://blog.csdn.net/zhaojiacan/article/details/51024944</a><br>微信模板消息的发送博客:<a href="http://blog.csdn.net/walkcode/article/details/49838353" target="_blank" rel="noopener">http://blog.csdn.net/walkcode/article/details/49838353</a><br>微信消息群发博客:<a href="http://blog.csdn.net/heboy19/article/details/49815611" target="_blank" rel="noopener">http://blog.csdn.net/heboy19/article/details/49815611</a><br>微信扫码支付:<a href="http://blog.csdn.net/wangqiuyun/article/details/51241064" target="_blank" rel="noopener">http://blog.csdn.net/wangqiuyun/article/details/51241064</a><br>微信全网发布博客:<a href="http://blog.csdn.net/wei389083222/article/details/53174612" target="_blank" rel="noopener">http://blog.csdn.net/wei389083222/article/details/53174612</a><br>微信全网发布博客:<a href="http://blog.csdn.net/zhangdaiscott/article/details/48269837" target="_blank" rel="noopener">http://blog.csdn.net/zhangdaiscott/article/details/48269837</a><br>微信全网发布博客:<a href="http://blog.csdn.net/liaoyundababe/article/details/53537417" target="_blank" rel="noopener">http://blog.csdn.net/liaoyundababe/article/details/53537417</a><br>微信全网发布博客:<a href="http://www.2cto.com/kf/201509/441616.html" target="_blank" rel="noopener">http://www.2cto.com/kf/201509/441616.html</a><br>百度地图:<a href="http://api.map.baidu.com/lbsapi/createmap/index.html" target="_blank" rel="noopener">http://api.map.baidu.com/lbsapi/createmap/index.html</a><br>微信支付配置的相关代码：<a href="http://blog.csdn.net/u012131769/article/details/52669988" target="_blank" rel="noopener">http://blog.csdn.net/u012131769/article/details/52669988</a><br>微信内H5调起支付:<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;index=6" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;index=6</a><br>微信内置浏览器:<a href="http://qydev.weixin.qq.com/wiki/index.phptitle=%E5%9B%9E%E8%B0%83%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">http://qydev.weixin.qq.com/wiki/index.phptitle=%E5%9B%9E%E8%B0%83%E6%A8%A1%E5%BC%8F</a><br>第三方平台企业号的调试:<a href="http://qydev.weixin.qq.com/debug" target="_blank" rel="noopener">http://qydev.weixin.qq.com/debug</a><br>jdk8：jce 下载地址：<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p><p>9.阿里短信接口教程<br><a href="https://help.aliyun.com/document_detail/44335.html?spm=5176.doc44333.6.548.InxqPw" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/44335.html?spm=5176.doc44333.6.548.InxqPw</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;



&lt;p&gt;spring cloud的视频 驰狼 ： &lt;a href=&quot;http://chilangedu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://chilangedu.com&lt;/a&gt;&lt;br&gt;spr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>linux入门</title>
    <link href="http://yoursite.com/2019/11/05/linux%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/11/05/linux入门/</id>
    <published>2019-11-05T03:06:30.000Z</published>
    <updated>2019-11-07T02:16:24.626Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li><p>安装虚拟机</p></li><li><p>启动虚拟机,安装系统</p></li><li><p>最小安装–&gt;基本环境:选择GNOME桌面(支持图形界面及命令)</p></li></ol><p>​                    附加选项:系统管理工具,安全性工具,开发工具,GNOME应用程序</p><p>​    安装位置:点进去确认一下</p><p>​    网络和主机名:点进去,以太网打开一个</p><ol start="4"><li><p>点击开始安装</p><p>用户设置-&gt;ROOT密码(最大权限的)</p><p>用户设置-&gt;创建用户</p></li><li><p>搭建ftp服务(我用的是Home Ftp Server)</p><p>在windows系统中搭建一个ftp服务，把要传输的文件存入服务器中(指定的文件夹下)，需要创建账户；</p><p>在Linux系统中，通过ftp下载需要的文件。</p></li></ol><h3 id="Linux环境配置"><a href="#Linux环境配置" class="headerlink" title="Linux环境配置"></a>Linux环境配置</h3><p>复制：cp 文件路径/文件 目标路径</p><p>当前路径 ./</p><p>查看文件 ls</p><p>详细查看文件 ls -l</p><p>解压文件 tar -zvxf</p><p>​    x : 从 tar 包中把文件提取出来</p><p>​    z : 表示 tar 包是被 gzip 压缩过的，所以解压时需要用 gunzip 解压</p><p>​    v : 显示详细信息</p><p>​    f : xxx.tar.gz : 指定被处理的文件是 xxx.tar.gz</p><p>​    (Linux下解压完就安装好了)</p><ul><li>查找<ul><li>find    根据文件属性，路径</li><li>grap   根据文件内容</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装虚拟机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动虚拟机,安装系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最小安装–&amp;gt;基本环境:选择GNOME桌面(支持图形界面及命令)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​   
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>springmvc面试题</title>
    <link href="http://yoursite.com/2019/11/05/springmvc%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2019/11/05/springmvc面试题/</id>
    <published>2019-11-05T00:29:22.000Z</published>
    <updated>2019-11-05T03:37:46.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springmvc面试题"><a href="#springmvc面试题" class="headerlink" title="springmvc面试题"></a>springmvc面试题</h1><a id="more"></a><p>1、什么是Spring MVC ？简单介绍下你对springMVC的理解?</p><p>Spring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。</p><p>2、SpringMVC的流程？</p><p>（1）用户发送请求至前端控制器DispatcherServlet；<br>（2） DispatcherServlet收到请求后，调用HandlerMapping处理器映射器，请求获取Handle；<br>（3）处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet；<br>（4）DispatcherServlet 调用 HandlerAdapter处理器适配器；<br>（5）HandlerAdapter 经过适配调用 具体处理器(Handler，也叫后端控制器)；<br>（6）Handler执行完成返回ModelAndView；<br>（7）HandlerAdapter将Handler执行结果ModelAndView返回给DispatcherServlet；<br>（8）DispatcherServlet将ModelAndView传给ViewResolver视图解析器进行解析；<br>（9）ViewResolver解析后返回具体View；<br>（10）DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）<br>（11）DispatcherServlet响应用户。</p><p> <img src="/assets/img/201911105.png" alt="img"> </p><p>3、Springmvc的优点:</p><p>（1）可以支持各种视图技术,而不仅仅局限于JSP；</p><p>（2）与Spring框架集成（如IoC容器、AOP等）；</p><p>（3）清晰的角色分配：前端控制器(dispatcherServlet) , 请求到处理器映射（handlerMapping), 处理器适配器（HandlerAdapter), 视图解析器（ViewResolver）。</p><p>（4） 支持各种请求资源的映射策略。</p><p>4、Spring MVC的主要组件？</p><p>（1）前端控制器 DispatcherServlet（不需要程序员开发）</p><p>作用：接收请求、响应结果，相当于转发器，有了DispatcherServlet 就减少了其它组件之间的耦合度。</p><p>（2）处理器映射器HandlerMapping（不需要程序员开发）</p><p>作用：根据请求的URL来查找Handler</p><p>（3）处理器适配器HandlerAdapter</p><p>注意：在编写Handler的时候要按照HandlerAdapter要求的规则去编写，这样适配器HandlerAdapter才可以正确的去执行Handler。</p><p>（4）处理器Handler（需要程序员开发）</p><p>（5）视图解析器 ViewResolver（不需要程序员开发）</p><p>作用：进行视图的解析，根据视图逻辑名解析成真正的视图（view）</p><p>（6）视图View（需要程序员开发jsp）</p><p>View是一个接口， 它的实现类支持不同的视图类型（jsp，freemarker，pdf等等）</p><p>5、springMVC和struts2的区别有哪些?</p><p>（1）springmvc的入口是一个servlet即前端控制器（DispatchServlet），而struts2入口是一个filter过虑器（StrutsPrepareAndExecuteFilter）。</p><p>（2）springmvc是基于方法开发(一个url对应一个方法)，请求参数传递到方法的形参，可以设计为单例或多例(建议单例)，struts2是基于类开发，传递参数是通过类的属性，只能设计为多例。</p><p>（3）Struts采用值栈存储请求和响应的数据，通过OGNL存取数据，springmvc通过参数解析器是将request请求内容解析，并给方法形参赋值，将数据和视图封装成ModelAndView对象，最后又将ModelAndView中的模型数据通过reques域传输到页面。Jsp视图解析器默认使用jstl。</p><p>6、SpringMVC怎么样设定重定向和转发的？</p><p>（1）转发：在返回值前面加”forward:”，譬如”forward:user.do?name=method4”</p><p>（2）重定向：在返回值前面加”redirect:”，譬如”redirect:<a href="http://www.baidu.com&quot;" target="_blank" rel="noopener">http://www.baidu.com&quot;</a></p><p>7、SpringMvc怎么和AJAX相互调用的？</p><p>通过Jackson框架就可以把Java里面的对象直接转化成Js可以识别的Json对象。具体步骤如下 ：</p><p>（1）加入Jackson.jar</p><p>（2）在配置文件中配置json的映射</p><p>（3）在接受Ajax方法里面可以直接返回Object,List等,但方法前面要加上@ResponseBody注解。</p><p>8、如何解决POST请求中文乱码问题，GET的又如何处理呢？</p><p>（1）解决post请求乱码问题：</p><p>在web.xml中配置一个CharacterEncodingFilter过滤器，设置成utf-8；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）get请求中文参数出现乱码解决方法有两个：</p><p>①修改tomcat配置文件添加编码与工程编码一致，如下：</p><p><code>&lt;ConnectorURIEncoding=&quot;utf-8&quot; connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;</code></p><p> ②另外一种方法对参数进行重新编码：</p><p><code>String userName = new String(request.getParamter(&quot;userName&quot;).getBytes(&quot;ISO8859-1&quot;),&quot;utf-8&quot;)</code></p><p>ISO8859-1是tomcat默认编码，需要将tomcat编码后的内容按utf-8编码。</p><p>9、Spring MVC的异常处理 ？</p><p>答：可以将异常抛给Spring框架，由Spring框架来处理；我们只需要配置简单的异常处理器，在异常处理器中添视图页面即可。</p><p>10、SpringMvc的控制器是不是单例模式,如果是,有什么问题,怎么解决？</p><p>答：是单例模式,所以在多线程访问的时候有线程安全问题,不要用同步,会影响性能的,解决方案是在控制器里面不能写字段。</p><p>11、 SpringMVC常用的注解有哪些？</p><p>@RequestMapping：用于处理请求 url 映射的注解，可用于类或方法上。用于类上，则表示类中的所有响应请求的方法都是以该地址作为父路径。</p><p>@RequestBody：注解实现接收http请求的json数据，将json转换为java对象。</p><p>@ResponseBody：注解实现将conreoller方法返回对象转化为json对象响应给客户。</p><p>12、SpingMvc中的控制器的注解一般用那个,有没有别的注解可以替代？</p><p>答：一般用@Controller注解,也可以使用@RestController,@RestController注解相当于@ResponseBody ＋ @Controller,表示是表现层,除此之外，一般不用别的注解代替。</p><p>13、如果在拦截请求中，我想拦截get方式提交的方法,怎么配置？</p><p>答：可以在@RequestMapping注解里面加上method=RequestMethod.GET。</p><p>14、怎样在方法里面得到Request,或者Session？</p><p>答：直接在方法的形参中声明request,SpringMvc就自动把request对象传入。</p><p>15、如果想在拦截的方法里面得到从前台传入的参数,怎么得到？</p><p>答：直接在形参里面声明这个参数就可以,但必须名字和传过来的参数一样。</p><p>16、如果前台有很多个参数传入,并且这些参数都是一个对象的,那么怎么样快速得到这个对象？</p><p>答：直接在方法中声明这个对象,SpringMvc就自动会把属性赋值到这个对象里面。</p><p>17、SpringMvc中函数的返回值是什么？</p><p>答：返回值可以有很多类型,有String, ModelAndView。ModelAndView类把视图和数据都合并的一起的，但一般用String比较好。</p><p>18、SpringMvc用什么对象从后台向前台传递数据的？</p><p>答：通过ModelMap对象,可以在这个对象里面调用put方法,把对象加到里面,前台就可以通过el表达式拿到。</p><p>19、怎么样把ModelMap里面的数据放入Session里面？</p><p>答：可以在类上面加上@SessionAttributes注解,里面包含的字符串就是要放入session里面的key。</p><p>20、SpringMvc里面拦截器是怎么写的：</p><p>有两种写法,一种是实现HandlerInterceptor接口，另外一种是继承适配器类，接着在接口方法当中，实现处理逻辑；然后在SpringMvc的配置文件中配置拦截器即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 配置SpringMvc的拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置一个拦截器的Bean就可以了 默认是对所有请求都拦截 --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zwp.action.MyHandlerInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 只针对部分请求拦截 --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/modelMap.do"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zwp.action.MyHandlerInterceptorAdapter"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>21、注解原理：</p><p>注解本质是一个继承了Annotation的特殊接口，其具体实现类是Java运行时生成的动态代理类。我们通过反射获取注解时，返回的是Java运行时生成的动态代理对象。通过代理对象调用自定义注解的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会从memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。</p><p>————————————————<br>版权声明：本文为CSDN博主「a745233700」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/a745233700/article/details/80963758" target="_blank" rel="noopener">https://blog.csdn.net/a745233700/article/details/80963758</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;springmvc面试题&quot;&gt;&lt;a href=&quot;#springmvc面试题&quot; class=&quot;headerlink&quot; title=&quot;springmvc面试题&quot;&gt;&lt;/a&gt;springmvc面试题&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>struts2</title>
    <link href="http://yoursite.com/2019/11/04/struts2/"/>
    <id>http://yoursite.com/2019/11/04/struts2/</id>
    <published>2019-11-04T03:01:56.000Z</published>
    <updated>2019-11-05T03:39:44.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h2><a id="more"></a><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>web.xml  拦截请求   Struts2的过滤器</li><li>Struts2 在服务启动过程中读取 Struts2的配置文件<pre><code>配置请求路径和类之间的映射            和方法之间的映射配置响应视图</code></pre></li><li>在Struts2中每一个请求对应一个Action<br>控制器必须要实现Action接口，进而实现接口中的execute方法</li></ol><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>struts.xml</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    在struts2中每一个请求对应着一个Action</span></span><br><span class="line"><span class="comment">                name:请求的路径</span></span><br><span class="line"><span class="comment">                class:请求路径对应的要执行的Action类</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"wangwu"</span> <span class="attr">class</span>=<span class="string">"cn.strurts2.controller.HelloStruts2"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--转发视图</span></span><br><span class="line"><span class="comment">            name:execute返回的字符串</span></span><br><span class="line"><span class="comment">            hello.jsp对应转发的视图</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"hello"</span>&gt;</span>hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>controller,实现Action接口的excute方法</p><p>在Struts中每一个</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.strurts2.controller;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.Action;</span><br><span class="line"><span class="comment">//请求对应的控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloStruts2</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//视图的名字</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Actionl类的实现方式"><a href="#Actionl类的实现方式" class="headerlink" title="Actionl类的实现方式"></a>Actionl类的实现方式</h3><ol><li>implements Action接口,实现execute方法,如上</li><li>继承ActionSupport类</li></ol><h3 id="Struts2实现登录"><a href="#Struts2实现登录" class="headerlink" title="Struts2实现登录"></a>Struts2实现登录</h3><ol><li>Struts.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置登录的Action    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"cn.struts2.controller.LoginAction"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  自动调用validate验证方法,当验证未通过时,struts2返回字符串input--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"redirect"</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"fail"</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>LoginAction.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.struts2.controller;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="comment">//对应前端页面的属性值,和前端页面的name值一致,struts会自动讲表单中的值赋给对应的属性</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//↑封装get/set方法</span></span><br><span class="line">    <span class="comment">//验证方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.userId.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            addFieldError(userId, <span class="string">"账号不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.pwd.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            addFieldError(pwd, <span class="string">"密码不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//执行登录判断</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//调用service</span></span><br><span class="line">        <span class="keyword">if</span> (userId.equals(<span class="string">"ZhangSan"</span>) &amp;&amp; pwd.equals(<span class="string">"123456"</span>)) &#123;</span><br><span class="line">            <span class="comment">//创建对象存放用户信息</span></span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setUserId(<span class="string">"ZhangSan"</span>);</span><br><span class="line">            user.setPwd(<span class="string">"123456"</span>);</span><br><span class="line">            user.setUserName(<span class="string">"张三"</span>);</span><br><span class="line">            <span class="comment">//使用session存放User对象</span></span><br><span class="line">            HttpSession session = <span class="keyword">null</span>;</span><br><span class="line">            session = ServletActionContext.getRequest().getSession();</span><br><span class="line">            session.setAttribute(<span class="string">"userInfo"</span>, user);</span><br><span class="line">            <span class="comment">//调用Service获取商品列表</span></span><br><span class="line">            ArrayList&lt;Goods&gt; goods = <span class="keyword">new</span> ArrayList&lt;Goods&gt;();</span><br><span class="line">            Goods goods1 = <span class="keyword">new</span> Goods(<span class="string">"1001"</span>, <span class="string">"可乐"</span>, <span class="string">"大连"</span>, <span class="string">"3"</span>);</span><br><span class="line">            Goods goods2 = <span class="keyword">new</span> Goods(<span class="string">"1002"</span>, <span class="string">"雪碧"</span>, <span class="string">"上海"</span>, <span class="string">"3"</span>);</span><br><span class="line">            Goods goods3 = <span class="keyword">new</span> Goods(<span class="string">"1003"</span>, <span class="string">"xo"</span>, <span class="string">"广州"</span>, <span class="string">"38000"</span>);</span><br><span class="line">            goods.add(goods1);</span><br><span class="line">            goods.add(goods2);</span><br><span class="line">            goods.add(goods3);</span><br><span class="line">            <span class="keyword">this</span>.goodsList = goods;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.message = <span class="string">"账号或密码错误,登录失败"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"fail"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>login.jsp</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--使用struts2标签--%&gt;</span><br><span class="line">&lt;s:form action=<span class="string">"login.action"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">    &lt;table align=<span class="string">"center"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;账号:&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;s:textfield name="userId"&gt;&lt;/s:textfield&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;密码:&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;s:password name="pwd"&gt;&lt;/s:password&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;s:submit value="登录"&gt;&lt;/s:submit&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">                &lt;%--  显示验证信息  --%&gt;</span><br><span class="line">            &lt;td&gt;&lt;s:property value="message"&gt;&lt;/s:property&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="多个请求对应同一Action中不同的方法"><a href="#多个请求对应同一Action中不同的方法" class="headerlink" title="多个请求对应同一Action中不同的方法"></a>多个请求对应同一Action中不同的方法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   多个请求对应同一Action中不同的方法     --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    不指定method时默认执行execute    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"t1"</span> <span class="attr">class</span>=<span class="string">"cn.struts2.controller.TestAction"</span> <span class="attr">method</span>=<span class="string">"test1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"test1"</span>&gt;</span>a.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"t2"</span> <span class="attr">class</span>=<span class="string">"cn.struts2.controller.TestAction"</span> <span class="attr">method</span>=<span class="string">"test2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"test2"</span>&gt;</span>b.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   优化:在此配置文件中减少action节点的 配置     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*Goods"</span> <span class="attr">class</span>=<span class="string">"cn.struts2.controller.GoodsAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;Goods"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    ↑method=&#123;1&#125;,这里的1是*Goods中 * 的值</span></span><br><span class="line"><span class="comment">                    addGoods调用add方法,updateGoods调用update方法</span></span><br><span class="line"><span class="comment">                    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"*"</span>&gt;</span>&#123;1&#125;Goods.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Action类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String message;</span><br><span class="line">    <span class="comment">//一个请求对应的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = <span class="string">"执行了test1方法"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//另一个请求对应的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = <span class="string">"执行了test2方法"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Struts标签</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代遍历</span></span><br><span class="line">&lt;s:iterator value=<span class="string">"goodsList"</span> status=<span class="string">"g"</span>&gt;</span><br><span class="line">&lt;s:property value=<span class="string">"goods_id"</span>/&gt;</span><br><span class="line">&lt;/s:iterator&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Struts2&quot;&gt;&lt;a href=&quot;#Struts2&quot; class=&quot;headerlink&quot; title=&quot;Struts2&quot;&gt;&lt;/a&gt;Struts2&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>集合底层部分-ArrayList</title>
    <link href="http://yoursite.com/2019/11/04/%E9%9B%86%E5%90%88%E5%BA%95%E5%B1%82%E9%83%A8%E5%88%86/"/>
    <id>http://yoursite.com/2019/11/04/集合底层部分/</id>
    <published>2019-11-04T01:40:32.000Z</published>
    <updated>2019-11-05T03:40:16.533Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><a id="more"></a><h3 id="一、ArrayList的数据结构"><a href="#一、ArrayList的数据结构" class="headerlink" title="一、ArrayList的数据结构"></a>一、ArrayList的数据结构</h3><p>ArrayList的底层数据结构就是一个数组，数组元素的类型为Object类型，对ArrayList的所有操作底层都是基于数组的。</p><p><img src="/assets/img/20191105-1.png" alt="img"></p><h3 id="二-ArrayList的线程安全性"><a href="#二-ArrayList的线程安全性" class="headerlink" title="二. ArrayList的线程安全性"></a>二. ArrayList的线程安全性</h3><p>对ArrayList进行添加元素的操作的时候是分两个步骤进行的，即第一步先在object[size]的位置上存放需要添加的元素；第二步将size的值增加1。由于这个过程在多线程的环境下是不能保证具有原子性的，因此ArrayList在多线程的环境下是线程不安全的。</p><p>具体举例说明：在单线程运行的情况下，如果Size = 0，添加一个元素后，此元素在位置 0，而且Size=1；而如果是在多线程情况下，比如有两个线程，线程 A 先将元素存放在位置0。但是此时 CPU 调度线程A暂停，线程 B 得到运行的机会。线程B也向此ArrayList 添加元素，因为此时 Size 仍然等于 0 （注意哦，我们假设的是添加一个元素是要两个步骤哦，而线程A仅仅完成了步骤1），所以线程B也将元素存放在位置0。然后线程A和线程B都继续运行，都增 加 Size 的值。 那好，现在我们来看看 ArrayList 的情况，元素实际上只有一个，存放在位置 0，而Size却等于 2。这就是“线程不安全”了。</p><p>如果非要在多线程的环境下使用ArrayList，就需要保证它的线程安全性，通常有两种解决办法：第一，使用synchronized关键字；第二，可以用Collections类中的静态方法synchronizedList();对ArrayList进行调用即可。</p><h3 id="三、ArrayList的继承关系"><a href="#三、ArrayList的继承关系" class="headerlink" title="三、ArrayList的继承关系"></a>三、ArrayList的继承关系</h3><p>ArrayList继承AbstractList抽象父类，实现了List接口（规定了List的操作规范）、RandomAccess（可随机访问）、Cloneable（可拷贝）、Serializable（可序列化）。</p><h3 id="四、ArrayList的主要成员变量"><a href="#四、ArrayList的主要成员变量" class="headerlink" title="四、ArrayList的主要成员变量"></a>四、ArrayList的主要成员变量</h3><p>private static final int DEFAULT_CAPACITY = 10；</p><p>当ArrayList的构造方法中没有显示指出ArrayList的数组长度时，类内部使用默认缺省时对象数组的容量大小，为10。</p><p>private static final Object[] EMPTY_ELEMENTDATA = {};</p><p>当ArrayList的构造方法中显示指出ArrayList的数组长度为0时，类内部将EMPTY_ELEMENTDATA 这个空对象数组赋给elemetData数组。</p><p>private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};</p><p>当ArrayList的构造方法中没有显示指出ArrayList的数组长度时，类内部使用默认缺省时对象数组为DEFAULTCAPACITY_EMPTY_ELEMENTDATA。</p><p>transient Object[] elemetData;</p><p>ArrayList的底层数据结构，只是一个对象数组，用于存放实际元素，并且被标记为transient，也就意味着在序列化的时候此字段是不会被序列化的。</p><p>private int size;</p><p>实际ArrayList中存放的元素的个数，默认时为0个元素。</p><p>private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE – 8;</p><p>ArrayList中的对象数组的最大数组容量为Integer.MAX_VALUE – 8。</p><p><code>public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</code></p><p>​    <code>implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</code></p><p><code>{</code></p><p>  <code>// 版本号</code></p><p>  <code>private static final long serialVersionUID = 8683452581122892189L;</code></p><p>  <code>// 缺省容量</code></p><p>  <code>private static final int DEFAULT_CAPACITY = 10;</code></p><p>  <code>// 空对象数组</code></p><p>  <code>private static final Object[] EMPTY_ELEMENTDATA = {};</code></p><p>  <code>// 缺省空对象数组</code></p><p>  <code>private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};</code></p><p>  <code>// 元素数组</code></p><p>  <code>transient Object[] elementData;</code></p><p>  <code>// 实际元素大小，默认为0</code></p><p>  <code>private int size;</code></p><p>  <code>// 最大数组容量</code></p><p>  <code>private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</code></p><p><code>}</code></p><h3 id="五、ArrayList的构造方法"><a href="#五、ArrayList的构造方法" class="headerlink" title="五、ArrayList的构造方法"></a>五、ArrayList的构造方法</h3><p>无参构造方法</p><p>对于无参构造方法，将成员变量elementData的值设为DEFAULTCAPACITY_EMPTY_ELEMENTDATA。</p><p>public ArrayList() { </p><p>​    // 无参构造函数，设置元素数组为空 </p><p>​    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</p><p>}</p><p>int类型参数构造方法</p><p>参数为希望的ArrayList的数组的长度，initialCapacity。首先要判断参数initialCapacity与0的大小关系：</p><p>如果initialCapacity大于0，则创建一个大小为initialCapacity的对象数组赋给elementData。</p><p>如果initialCapacity等于0，则将EMPTY_ELEMENTDATA赋给elementData。</p><p>如果initialCapacity小于0，抛出异常（非法的容量）。</p><p><code>public ArrayList(int initialCapacity) {</code></p><p>  <code>if (initialCapacity &gt; 0) { // 初始容量大于0</code></p><p>​    <code>this.elementData = new Object[initialCapacity]; // 初始化元素数组</code></p><p>  <code>} else if (initialCapacity == 0) { // 初始容量为0</code></p><p>​    <code>this.elementData = EMPTY_ELEMENTDATA; // 为空对象数组</code></p><p>  <code>} else { // 初始容量小于0，抛出异常</code></p><p>​    <code>throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</code></p><p>​                        <code>initialCapacity);</code></p><p>  <code>}</code></p><p><code>}</code></p><p>Collection&lt;? extends E&gt;类型构造方法</p><p>第一步，将参数中的集合转化为数组赋给elementData；</p><p>第二步，参数集合是否是空。通过比较size与第一步中的数组长度的大小。</p><p>第三步，如果参数集合为空，则设置元素数组为空，即将EMPTY_ELEMENTDATA赋给elementData；</p><p>第四步，如果参数集合不为空，接下来判断是否成功将参数集合转化为Object类型的数组，如果转化成Object类型的数组成功，则将数组进行复制，转化为Object类型的数组。</p><p><code>public ArrayList(Collection&lt;? extends E&gt; c) { // 集合参数构造函数</code></p><p>  <code>elementData = c.toArray(); // 转化为数组</code></p><p>  <code>if ((size = elementData.length) != 0) { // 参数为非空集合</code></p><p>​    <code>if (elementData.getClass() != Object[].class) // 是否成功转化为Object类型数组</code></p><p>​      <code>elementData = Arrays.copyOf(elementData, size, Object[].class); // 不为Object数组的话就进行复制</code></p><p>  <code>} else { // 集合大小为空，则设置元素数组为空</code></p><p>​     <code>this.elementData = EMPTY_ELEMENTDATA;</code></p><p>  <code>}</code></p><p><code>}</code></p><h3 id="六、ArrayList的add-方法"><a href="#六、ArrayList的add-方法" class="headerlink" title="六、ArrayList的add()方法"></a>六、ArrayList的add()方法</h3><p>在add()方法中主要完成了三件事：首先确保能够将希望添加到集合中的元素能够添加到集合中，即确保ArrayList的容量（判断是否需要扩容）；然后将元素添加到elementData数组的指定位置；最后将集合中实际的元素个数加1。</p><p><code>public boolean add(E e) { // 添加元素</code></p><p>  <code>ensureCapacityInternal(size + 1); // Increments modCount!!</code></p><p>  <code>elementData[size++] = e;</code></p><p>  <code>return true;</code></p><p><code>}</code></p><h3 id="七、ArrayList的扩容机制"><a href="#七、ArrayList的扩容机制" class="headerlink" title="七、ArrayList的扩容机制"></a>七、ArrayList的扩容机制</h3><p>ArrayList的扩容主要发生在向ArrayList集合中添加元素的时候。由add()方法的分析可知添加前必须确保集合的容量能够放下添加的元素。主要经历了以下几个阶段：</p><p>第一，在add()方法中调用ensureCapacityInternal(size + 1)方法来确定集合确保添加元素成功的最小集合容量minCapacity的值。参数为size+1，代表的含义是如果集合添加元素成功后，集合中的实际元素个数。换句话说，集合为了确保添加元素成功，那么集合的最小容量minCapacity应该是size+1。在ensureCapacityInternal方法中，首先判断elementData是否为默认的空数组，如果是，minCapacity为minCapacity与集合默认容量大小中的较大值。</p><p>第二，调用ensureExplicitCapacity(minCapacity)方法来确定集合为了确保添加元素成功是否需要对现有的元素数组进行扩容。首先将结构性修改计数器加一；然后判断minCapacity与当前元素数组的长度的大小，如果minCapacity比当前元素数组的长度的大小大的时候需要扩容，进入第三阶段。</p><p>第三，如果需要对现有的元素数组进行扩容，则调用grow(minCapacity)方法，参数minCapacity表示集合为了确保添加元素成功的最小容量。在扩容的时候，首先将原元素数组的长度增大1.5倍（oldCapacity + (oldCapacity &gt;&gt; 1)），然后对扩容后的容量与minCapacity进行比较：① 新容量小于minCapacity，则将新容量设为minCapacity；②新容量大于minCapacity，则指定新容量。最后将旧数组拷贝到扩容后的新数组中。</p><p><code>private void ensureCapacityInternal(int minCapacity) {</code></p><p>  <code>if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { // 判断元素数组是否为空数组</code></p><p>​    <code>minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity); // 取较大值</code></p><p>  <code>}</code></p><p>``    </p><p>  <code>ensureExplicitCapacity(minCapacity);</code></p><p><code>}</code></p><p>`` </p><p>`` </p><p><code>private void ensureExplicitCapacity(int minCapacity) {</code></p><p>  <code>// 结构性修改加1</code></p><p>​    <code>modCount++;</code></p><p>  <code>if (minCapacity - elementData.length &gt; 0)</code></p><p>​    <code>grow(minCapacity);</code></p><p><code>}</code></p><p><code>private void grow(int minCapacity) {</code></p><p>  <code>int oldCapacity = elementData.length; // 旧容量</code></p><p>  <code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); // 新容量为旧容量的1.5倍</code></p><p>  <code>if (newCapacity - minCapacity &lt; 0) // 新容量小于参数指定容量，修改新容量</code></p><p>​    <code>newCapacity = minCapacity;</code></p><p>  <code>if (newCapacity - MAX_ARRAY_SIZE &gt; 0) // 新容量大于最大容量</code></p><p>​    <code>newCapacity = hugeCapacity(minCapacity); // 指定新容量</code></p><p>  <code>// 拷贝扩容</code></p><p>  <code>elementData = Arrays.copyOf(elementData, newCapacity);</code></p><p><code>}</code></p><h3 id="八、ArrayList的set-int-index-E-element-方法"><a href="#八、ArrayList的set-int-index-E-element-方法" class="headerlink" title="八、ArrayList的set(int index,E element)方法"></a>八、ArrayList的set(int index,E element)方法</h3><p>set(int index, E element)方法的作用是指定下标索引处的元素的值。在ArrayList的源码实现中，方法内首先判断传递的元素数组下标参数是否合法，然后将原来的值取出，设置为新的值，将旧值作为返回值返回。</p><p><code>public E set(int index, E element) {</code></p><p>  <code>// 检验索引是否合法</code></p><p>  <code>rangeCheck(index);</code></p><p>  <code>// 旧值</code></p><p>  <code>E oldValue = elementData(index);</code></p><p>  <code>// 赋新值</code></p><p>  <code>elementData[index] = element;</code></p><p>  <code>// 返回旧值</code></p><p>  <code>return oldValue;</code></p><p><code>}</code></p><h3 id="九、ArrayList的indexOf-Object-o-方法"><a href="#九、ArrayList的indexOf-Object-o-方法" class="headerlink" title="九、ArrayList的indexOf(Object o)方法"></a>九、ArrayList的indexOf(Object o)方法</h3><p>indexOf(Object o)方法的作用是从头开始查找与指定元素相等的元素，如果找到，则返回找到的元素在元素数组中的下标，如果没有找到返回-1。与该方法类似的是lastIndexOf(Object o)方法，该方法的作用是从尾部开始查找与指定元素相等的元素。</p><p>查看该方法的源码可知，该方法从需要查找的元素是否为空的角度分为两种情况分别讨论。这也意味着该方法的参数可以是null元素，也意味着ArrayList集合中能够保存null元素。方法实现的逻辑也比较简单，直接循环遍历元素数组，通过equals方法来判断对象是否相同，相同就返回下标，找不到就返回-1。这也解释了为什么要把情况分为需要查找的对象是否为空两种情况讨论，不然的话空对象调用equals方法则会产生空指针异常。</p><p><code>// 从首开始查找数组里面是否存在指定元素</code></p><p><code>public int indexOf(Object o) {</code></p><p>  <code>if (o == null) { // 查找的元素为空</code></p><p>​    <code>for (int i = 0; i &lt; size; i++) // 遍历数组，找到第一个为空的元素，返回下标</code></p><p>​      <code>if (elementData[i]==null)</code></p><p>​        <code>return i;</code></p><p>  <code>} else { // 查找的元素不为空</code></p><p>​    <code>for (int i = 0; i &lt; size; i++) // 遍历数组，找到第一个和指定元素相等的元素，返回下标</code></p><p>​      <code>if (o.equals(elementData[i]))</code></p><p>​          <code>return i;</code></p><p>  <code>}</code> </p><p>  <code>// 没有找到，返回空</code></p><p>  <code>return -1;</code></p><p><code>}</code></p><h3 id="十、ArrayList的get-int-index-方法"><a href="#十、ArrayList的get-int-index-方法" class="headerlink" title="十、ArrayList的get(int index)方法"></a>十、ArrayList的get(int index)方法</h3><p>get(int index)方法是返回指定下标处的元素的值。get函数会检查索引值是否合法（只检查是否大于size，而没有检查是否小于0）。如果所引致合法，则调用elementData(int index)方法获取值。在elementData(int index)方法中返回元素数组中指定下标的元素，并且对其进行了向下转型。</p><p><code>public E get(int index) {</code></p><p>  <code>// 检验索引是否合法</code></p><p>  <code>rangeCheck(index);</code></p><p>`` </p><p>  <code>return elementData(index);</code></p><p><code>}</code></p><p>`` </p><p><code>E elementData(int index) {</code></p><p>  <code>return (E) elementData[index];</code></p><p><code>}</code></p><h3 id="十一、ArrayList的remove-int-index-方法"><a href="#十一、ArrayList的remove-int-index-方法" class="headerlink" title="十一、ArrayList的remove(int index)方法"></a>十一、ArrayList的remove(int index)方法</h3><p>remove(int index)方法的作用是删除指定下标的元素。在该方法的源码中，将指定下标后面一位到数组末尾的全部元素向前移动一个单位，并且把数组最后一个元素设置为null，这样方便之后将整个数组不再使用时，会被GC，可以作为小技巧。而需要移动的元素个数为：size-index-1。</p><p><code>public E remove(int index) {</code></p><p>  <code>// 检查索引是否合法</code></p><p>  <code>rangeCheck(index);</code></p><p>``    </p><p>  <code>modCount++;</code></p><p>  <code>E oldValue = elementData(index);</code></p><p>  <code>// 需要移动的元素的个数</code></p><p>  <code>int numMoved = size - index - 1;</code></p><p>  <code>if (numMoved &gt; 0)</code></p><p>​    <code>System.arraycopy(elementData, index+1, elementData, index,</code></p><p>​               <code>numMoved);</code></p><p>  <code>// 赋值为空，有利于进行GC</code></p><p>  <code>elementData[--size] = null;</code> </p><p>  <code>// 返回旧值</code></p><p>  <code>return oldValue;</code></p><p><code>}</code></p><h3 id="十二、ArrayList的优缺点"><a href="#十二、ArrayList的优缺点" class="headerlink" title="十二、ArrayList的优缺点"></a>十二、ArrayList的优缺点</h3><p>ArrayList的优点</p><p>ArrayList底层以数组实现，是一种随机访问模式，再加上它实现了RandomAccess接口，因此查找也就是get的时候非常快。</p><p>ArrayList在顺序添加一个元素的时候非常方便，只是往数组里面添加了一个元素而已。</p><p>根据下标遍历元素，效率高。</p><p>根据下标访问元素，效率高。</p><p>可以自动扩容，默认为每次扩容为原来的1.5倍。</p><p>ArrayList的缺点</p><p>插入和删除元素的效率不高。</p><p>根据元素下标查找元素需要遍历整个元素数组，效率不高。</p><p>线程不安全。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ArrayList&quot;&gt;&lt;a href=&quot;#ArrayList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList&quot;&gt;&lt;/a&gt;ArrayList&lt;/h3&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>hibernate-2</title>
    <link href="http://yoursite.com/2019/11/01/hibernate-2/"/>
    <id>http://yoursite.com/2019/11/01/hibernate-2/</id>
    <published>2019-11-01T02:04:58.000Z</published>
    <updated>2019-11-05T03:40:56.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HQL-Hibernate-Query-Language"><a href="#HQL-Hibernate-Query-Language" class="headerlink" title="HQL(Hibernate Query Language)"></a>HQL(Hibernate Query Language)</h2><a id="more"></a><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h6 id="查询所有部门"><a href="#查询所有部门" class="headerlink" title="查询所有部门"></a>查询所有部门</h6><p>DeptDao.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询所有部门</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getDeptList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//声明HQLDept是实体类的名字</span></span><br><span class="line">    String hql = <span class="string">"from Dept"</span>;</span><br><span class="line">    <span class="comment">//因为查询出来的结果是持久状态，修改对象时会修改数据库，因此虽然是查询也需要事务</span></span><br><span class="line">    <span class="keyword">super</span>.getSession().beginTransaction();</span><br><span class="line">    <span class="comment">//执行HQL</span></span><br><span class="line">    Query query = <span class="keyword">super</span>.getSession().createQuery(hql);</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    List&lt;Dept&gt; depts = query.list();</span><br><span class="line">    <span class="keyword">super</span>.getSession().close();</span><br><span class="line">    <span class="keyword">return</span> depts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DeptService.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getDeptlist</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dd.getDeptList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="按条件查询"><a href="#按条件查询" class="headerlink" title="按条件查询"></a>按条件查询</h6><p>DeptDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getDeptBy</span><span class="params">(Dept dept)</span></span>&#123;</span><br><span class="line">    String hql = <span class="string">"from Dept d where d.dname = ?"</span>;</span><br><span class="line">    <span class="keyword">super</span>.getSession().beginTransaction();</span><br><span class="line">    Query query = <span class="keyword">super</span>.getSession().createQuery(hql);</span><br><span class="line">    <span class="comment">//给？赋值</span></span><br><span class="line">    query.setString(<span class="number">0</span>,dept.getDname());</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    List&lt;Dept&gt; depts = query.list();</span><br><span class="line">    <span class="keyword">super</span>.getSession().close();</span><br><span class="line">    <span class="keyword">return</span> depts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="按条件模糊查询："><a href="#按条件模糊查询：" class="headerlink" title="按条件模糊查询："></a>按条件模糊查询：</h6><p>DeptDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getDeptBy2</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">    String hql = <span class="string">"from Dept d where d.dname like ? and loc = ?"</span>;</span><br><span class="line">    <span class="keyword">super</span>.getSession().beginTransaction();</span><br><span class="line">    Query query = <span class="keyword">super</span>.getSession().createQuery(hql);</span><br><span class="line">    query.setString(<span class="number">0</span>, <span class="string">"%"</span> + dept.getDname() + <span class="string">"%"</span>);</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    query.setString(<span class="number">1</span>, dept.getLoc());</span><br><span class="line">    List&lt;Dept&gt; depts = query.list();</span><br><span class="line">    <span class="keyword">super</span>.getSession().close();</span><br><span class="line">    <span class="keyword">return</span> depts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="在hql语句中使用命名参数："><a href="#在hql语句中使用命名参数：" class="headerlink" title="在hql语句中使用命名参数："></a>在hql语句中使用命名参数：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getDeptBy3</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//:xxx 命名参数</span></span><br><span class="line">    String hql = <span class="string">"from Dept d where d.dname like :dn and loc = :loc"</span>;</span><br><span class="line">    <span class="keyword">super</span>.getSession().beginTransaction();</span><br><span class="line">    Query query = <span class="keyword">super</span>.getSession().createQuery(hql);</span><br><span class="line">    <span class="comment">//赋值方式1：</span></span><br><span class="line">    <span class="comment">//query.setString("dn",dept.getDname());</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//赋值方式2：把命名参数的值存入Map集合中</span></span><br><span class="line">    <span class="comment">//创建一个Map集合</span></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"dn"</span>, <span class="string">"%"</span> + dept.getDname() + <span class="string">"%"</span>);</span><br><span class="line">    map.put(<span class="string">"loc"</span>, dept.getLoc());</span><br><span class="line">    query.setProperties(map);</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    List&lt;Dept&gt; depts = query.list();</span><br><span class="line">    <span class="keyword">super</span>.getSession().close();</span><br><span class="line">    <span class="keyword">return</span> depts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="查询指定的列"><a href="#查询指定的列" class="headerlink" title="查询指定的列:"></a>查询指定的列:</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行后，不自动返回dept对象，因为使用了select，会返回异常</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getDepts</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.getSession().beginTransaction();</span><br><span class="line">    <span class="comment">//需要哪些列查询哪些列</span></span><br><span class="line">    String hql = <span class="string">"select dname,loc from Dept where dname=?"</span>;</span><br><span class="line">    Query query = <span class="keyword">super</span>.getSession().createQuery(hql);</span><br><span class="line">    query.setString(<span class="number">0</span>, name);</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    List&lt;Dept&gt; depts = query.list();</span><br><span class="line">    <span class="keyword">super</span>.getSession().close();</span><br><span class="line">    <span class="keyword">return</span> depts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>↑???返回的集合长度为1,但是打印出来的是hashcode(重写了toString方法),无法强转成Dept类,什么鬼</p><p>解决方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getDepts4</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//在这里使用的是Dept类有参的构造方法。重载一个</span></span><br><span class="line">String sql = <span class="string">"select new Dept(dname,loc) from Dept"</span>; </span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    List&lt;Dept&gt; depts = query.list();</span><br><span class="line">    <span class="keyword">super</span>.getSession().close();</span><br><span class="line">    <span class="keyword">return</span> depts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="返回字符串数组"><a href="#返回字符串数组" class="headerlink" title="返回字符串数组"></a>返回字符串数组</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getDeptNames</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">super</span>.getSession().beginTransaction();</span><br><span class="line">        String hql = <span class="string">"select dname from Dept"</span>;</span><br><span class="line">        Query query = <span class="keyword">super</span>.getSession().createQuery(hql);</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        List&lt;String&gt; dnames = query.list();</span><br><span class="line">        <span class="keyword">super</span>.getSession().close();</span><br><span class="line">        <span class="keyword">return</span> dnames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="返回对象数组："><a href="#返回对象数组：" class="headerlink" title="返回对象数组："></a>返回对象数组：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Object[]&gt; getDeptObject()&#123;</span><br><span class="line">    <span class="keyword">super</span>.getSession().beginTransaction();</span><br><span class="line">    String hql = <span class="string">"select dname,loc from Dept"</span>;</span><br><span class="line">    Query query = <span class="keyword">super</span>.getSession().createQuery(hql);</span><br><span class="line">    List&lt;Object[]&gt; objects = query.list();</span><br><span class="line">    <span class="keyword">super</span>.getSession().close();</span><br><span class="line">    <span class="keyword">return</span> objects;</span><br><span class="line"><span class="comment">/*返回的结果大概是这个样子：</span></span><br><span class="line"><span class="comment">*&#123;</span></span><br><span class="line"><span class="comment">*["dname":"xxx","loc":"xxxxx"],</span></span><br><span class="line"><span class="comment">*["dname":"xxx","loc":"xxxxx"]</span></span><br><span class="line"><span class="comment">*&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一对多，多对一关系"><a href="#一对多，多对一关系" class="headerlink" title="一对多，多对一关系"></a>一对多，多对一关系</h3><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"dept"</span> <span class="attr">class</span>=<span class="string">"cn.qf.hibernate.pojo.Dept"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>默认懒加载,如果用到了dept这个数据并且在return之前把session关掉了就会报错</p><h3 id="hibernate插件分页"><a href="#hibernate插件分页" class="headerlink" title="hibernate插件分页"></a>hibernate插件分页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询用户</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title">getEmpByPages</span><span class="params">(<span class="keyword">int</span> currentPage,<span class="keyword">int</span> pageSize)</span></span>&#123;</span><br><span class="line"><span class="comment">//计算从哪条数据开始获取</span></span><br><span class="line"><span class="keyword">int</span> start = (currentPage-<span class="number">1</span>) * pageSize;</span><br><span class="line">    <span class="comment">//这里Dept是懒加载所以把它抛出去不用.</span></span><br><span class="line">    String hql = <span class="string">"select new Emp(empno,ename,job) from Emp"</span>;</span><br><span class="line">    <span class="comment">//↑因为这个分页是查所有数据，再进行分页，所以不适合大量数据</span></span><br><span class="line">    <span class="keyword">super</span>.getSession().beginTransaction();</span><br><span class="line">    Query query = <span class="keyword">super</span>.getSession().createQuery(hql);</span><br><span class="line">    <span class="comment">//设置查询的开始</span></span><br><span class="line">    query.setFirstResult(start);</span><br><span class="line">    query.setMaxResults(pageSize);</span><br><span class="line">    list&lt;Emp&gt; emps = query.list();</span><br><span class="line">    <span class="keyword">super</span>.getSession().close();</span><br><span class="line"><span class="keyword">return</span> emps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="各种数据库分页"><a href="#各种数据库分页" class="headerlink" title="各种数据库分页"></a>各种数据库分页</h3><ul><li><p>SQL server：top</p></li><li><p>mysql : limit 0,5</p></li><li><p>Oracle：借助于rownum伪列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 分页，每页2条数据，查询第二页的数据</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">rownum</span> r,e.* <span class="keyword">from</span> emp e) <span class="keyword">where</span> r &gt; <span class="number">2</span> <span class="keyword">and</span> r &lt; <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>在这里如果直接写 rownum&gt;2，没有查询到任何记录。</p><p>因为rownum总是从1开始的，第一条不满足去掉的话，第二条的rownum 又成了1。依此类推，所以永远没有满足条件的记录。</p><p>可以这样理解：rownum是一个序列，是Oracle数据库从数据文件或缓冲区中读取数据的顺序。</p><p>它取得第一条记录则rownum值为1，第二条为2。依次类推。</p><p>rownum是在查询到的结果集后，再加上去的，它总是从1开始的 </p><p>从上可得,任何时候想把rownum = 1这条记录抛弃是不对的。它在结果集中是不可或缺的。</p><p>少了rownum=1就像空中楼阁一般不能存在。所以，rownum条件要包含到1。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HQL-Hibernate-Query-Language&quot;&gt;&lt;a href=&quot;#HQL-Hibernate-Query-Language&quot; class=&quot;headerlink&quot; title=&quot;HQL(Hibernate Query Language)&quot;&gt;&lt;/a&gt;HQL(Hibernate Query Language)&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>sql优化</title>
    <link href="http://yoursite.com/2019/11/01/sql%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2019/11/01/sql优化/</id>
    <published>2019-11-01T01:33:52.000Z</published>
    <updated>2019-11-05T03:43:37.363Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="如何优化数据库"><a href="#如何优化数据库" class="headerlink" title="如何优化数据库"></a>如何优化数据库</h3><ol><li>优化索引、SQL语句、分析慢查询</li><li>设计表的时候严格按照数据库的设计范式来设计数据库</li><li>我们可以加上redis缓存，将经常被访问到的数据，但是不需要经常变化的数据放入至redis缓存服务器里面，这样的话能够节约太强盘I/0（昨天）</li><li>还可优化硬件，在硬件层面，我们可以使用更好的一些硬盘（固态硬盘），使用一些磁盘阵列技术（raid 0,raid1,raid5）<br>raid0 最简单的 （两块硬盘硬盘相加100G +  100 G = 200G）<br>raid1 镜像卷  把同样的数据写两份。可以随机从A/B里面读取，更高。硬盘坏了一块，数据也不会丢失<br>raid5  3块硬盘，坏了一块，另外两块也能工作。 </li><li>如果以上都做速度还是慢，先不要去切分可以使用MySQL内部自带的表分区技术，来将数据分成不同的文件。这样能够让磁盘在读取的时候效率更高。</li><li>可以再做垂直分表，可以将不经常读数据放到另外一个表里面去。这样能够节约磁盘IO</li><li>如果发现我们的效率还是不够高，我们可以采用主从的方式来将数据读写分离。</li><li>数据量特别大，我们优化起来会很困难可以使数数据库中间件的方式，将数据进行分库分表分机器。（原理，数据路由</li><li>此外，我们还可以采用一些更快的存储方式，例如NoSQL来存储一些我们需要经常访问到的数据。从数据库里面取出来后，再到NoSQL取出一些其他的数据。</li><li>此外还有一些表引擎 选择，参数优化和一些相关小技巧都是优化MySQL的方式</li><li>我们还可以将我们的业务系统在架构级别进行缓存，静态化和分式式。</li><li>不使用全文索引，使用xunsearch，ES或者云服务器上的索引。</li></ol><h3 id="如何优化SQL语句"><a href="#如何优化SQL语句" class="headerlink" title="如何优化SQL语句"></a>如何优化SQL语句</h3><ol><li>尽量选择较小的列–需要哪些列就使用哪些列  长度较小的列</li><li>将where中用的比较频繁的字段建立索引–有多个条件，使用索引的列排在前面</li><li>select子句中避免使用‘*’</li><li>避免在索引列上使用计算、not in 和&lt;&gt;等操作</li><li>当只需要一行数据的时候使用limit 1</li><li>保证单表数据不超过200W，适时分割表。针对查询较慢的语句，可以使用explain 来分析该语句具体的执行情况。</li><li>避免改变索引列的类型。</li><li>选择最有效的表名顺序，from字句中写在最后的表是基础表，将被最先处理，在from子句中包含多个表的情况下，你必须选择记录条数最少的表作为基础表。</li><li>避免在索引列上面进行计算。</li><li>尽量缩小子查询的结果</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h3 id=&quot;如何优化数据库&quot;&gt;&lt;a href=&quot;#如何优化数据库&quot; class=&quot;headerlink&quot; title=&quot;如何优化数据库&quot;&gt;&lt;/a&gt;如何优化数据库&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;优化索引、SQL语句、分析慢查询&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hibernate(1)</title>
    <link href="http://yoursite.com/2019/10/31/hibernate-1/"/>
    <id>http://yoursite.com/2019/10/31/hibernate-1/</id>
    <published>2019-10-31T01:27:26.000Z</published>
    <updated>2019-10-31T11:11:40.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h2><a id="more"></a><p>相当于ORM的鼻祖</p><p>比较早，学校里学过的都是挺老的吧。SS2H</p><ul><li><p>优缺点：</p><ul><li><p>全自动化</p><p>相比mybatis是半自动化的，可以根据自己的需求定制。</p><p>//但是洗衣机还是要选全自动的。马桶也是。</p></li><li><p>简化了JDBC繁琐的代码</p></li><li><p>可移植性好</p><p>mysql，oracle什么的都可以用</p></li><li><p>对面向对象特性支持良好</p></li><li><p>缺点：</p><ul><li>不适合需要使用数据库的特定优化机制的情况</li><li>不适合大规模的批量数据处理</li></ul></li><li><p>与mybatis比较：</p><ul><li>相对于MyBatis的“SQL-Mapping”的ORM实现，Hibernate的ORM实现更加完善，提供了对象状态管理、级联操作等功能</li><li>完全面向对象，语句与数据库无关，开发者无需关注SQL的生成，开发简单，便于修改，数据库移植性好</li><li>由于直接使用SQL，MyBatis使用自由度较高</li></ul></li></ul></li></ul><h3 id="第一个hibernate项目"><a href="#第一个hibernate项目" class="headerlink" title="第一个hibernate项目"></a>第一个hibernate项目</h3><ul><li>搭建Hibernate环境的步骤<ol><li>引入所需的jar文件</li><li>配置hibernate.cfg.xml</li><li>创建持久化类并配置相关hbm.xml映射文件</li><li>在hibernate.cfg.xml中引入hbm.xml映射文件</li></ol></li></ul><ol><li>hibernate配置文件</li></ol><p>resource下新建hibernate.cfg.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  配置数据库连接信息  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    数据库的url    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span></span><br><span class="line">            jdbc:mysql://127.0.0.1:3306/test2</span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   数据库平台:hibernate根据告知的平台来生成对应的sql     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   设置session的有效范围,thread,在线程内有效     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    设置显示自动生成的sql    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    设置SQL语句格式化;显示对sql格式化后的内容    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    告知hibernate映射文件的位置及具体文件    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/qf/hibernate/pojo/Dept.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>创建实体类</p><p>随便建一个Dept.java,封装get/set方法;</p></li><li><p>在实体类同路径下创建Dept.hbm.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    name:实体类的名字</span></span><br><span class="line"><span class="comment">            table:数据库中对应的表名</span></span><br><span class="line"><span class="comment">            dynamic-update:自动更新</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.qf.hibernate.pojo.Dept"</span> <span class="attr">table</span>=<span class="string">"dept"</span> <span class="attr">dynamic-update</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   主键使用id标签进行关联映射,其余属性property     --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    实体类的属性名和字段名不需要一致    --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   name:实体类的属性名  column:数据库中对应的字段名  type:属性的java类型     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"deptno"</span> <span class="attr">column</span>=<span class="string">"deptno"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--    主键的生成策略    assigned 用户自己赋值插入 使用setXXX赋值    --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"assigned"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dname"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  这么写也行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"dname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loc"</span> <span class="attr">column</span>=<span class="string">"loc"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在dao下创建HibernateUtil.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.qf.hibernate.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.classic.Session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    声明hibernate的配置对象类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration;</span><br><span class="line">    <span class="comment">//声明一个sessionFactory 创建session</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> SessionFactory SESSION_FACTORY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//        1.读取配置文件hibernate.cfg.xml并创建配置对象</span></span><br><span class="line">        configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        <span class="comment">//2.通过配置对象 构建工厂对象</span></span><br><span class="line">        SESSION_FACTORY = configuration.buildSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   获取session的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.通过工厂对象获取session</span></span><br><span class="line">        <span class="keyword">return</span> SESSION_FACTORY.getCurrentSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>dao下创建一个BaseDao.java(这个可有可无)</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.qf.hibernate.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HibernateUtil.getSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>dao下创建DeptDao.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.qf.hibernate.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.qf.hibernate.pojo.Dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    添加部门方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        获取session,调用session的save方法</span></span><br><span class="line">        <span class="keyword">super</span>.getSession().save(dept);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><p>service下创建DeptService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.qf.hibernate.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.qf.hibernate.dao.DeptDao;</span><br><span class="line"><span class="keyword">import</span> cn.qf.hibernate.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DeptDao dd = <span class="keyword">new</span> DeptDao();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明事务对象</span></span><br><span class="line">        Transaction tr = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//获取事务对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tr = dd.getSession().beginTransaction();</span><br><span class="line">            dd.addDept(dept);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            tr.commit();</span><br><span class="line">            dd.getSession().close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            tr.rollback();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>建一个测试类试试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.qf.hibernate.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.qf.hibernate.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> cn.qf.hibernate.service.DeptService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> DeptService ds = <span class="keyword">new</span> DeptService();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        addDept();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addDept</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Dept dept = <span class="keyword">new</span> Dept();</span><br><span class="line">        dept.setDeptno(<span class="string">"123asd"</span>);</span><br><span class="line">        dept.setDname(<span class="string">"王五"</span>);</span><br><span class="line">        dept.setLoc(<span class="string">"大连市高新园区"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> result = ds.addDept(dept);</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            System.out.println(<span class="string">"success"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"failed"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="/assets/img/1572503704550.png" alt="1572503704550"></p></li></ol><ul><li><p>获取单个对象的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询获取单个对象1</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Dept <span class="title">loadDept</span><span class="params">(Serializable id)</span> </span>&#123;</span><br><span class="line">     Dept dept = (Dept) <span class="keyword">super</span>.getSession().load(Dept.class, id);</span><br><span class="line">     <span class="keyword">return</span> dept;</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//查询获取单个对象2</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">(Serializable id)</span> </span>&#123;</span><br><span class="line">     Dept dept = (Dept) <span class="keyword">super</span>.getSession().get(Dept.class, id);</span><br><span class="line">     <span class="keyword">return</span> dept;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>get和load区别:<br>get:若数据不存在,返回null;<br>load:若数据不存在,使用时抛出ObjectNotFoundException异常</p></li></ul><h3 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h3><p><img src="/assets/img/1572508878109.png" alt="1572508878109"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hibernate&quot;&gt;&lt;a href=&quot;#Hibernate&quot; class=&quot;headerlink&quot; title=&quot;Hibernate&quot;&gt;&lt;/a&gt;Hibernate&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://yoursite.com/2019/10/31/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2019/10/31/二叉树/</id>
    <published>2019-10-31T00:12:53.000Z</published>
    <updated>2019-10-31T11:11:41.083Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>一、树的定义</p><p>树是一种数据结构，它是由n（n&gt;=1）个有限结点组成一个具有层次关系的集合。</p><p><img src="/assets/img/20170324154348019.png" alt="img"> </p><p>树具有的特点有：</p><p>（1）每个结点有零个或多个子结点</p><p>（2）没有父节点的结点称为根节点</p><p>（3）每一个非根结点有且只有一个父节点</p><p>（4）除了根结点外，每个子结点可以分为多个不相交的子树。</p><p>树的基本术语有：</p><p>若一个结点有子树，那么该结点称为子树根的“双亲”，子树的根称为该结点的“孩子”。有相同双亲的结点互为“兄弟”。一个结点的所有子树上的任何结点都是该结点的后裔。从根结点到某个结点的路径上的所有结点都是该结点的祖先。</p><p>结点的度：结点拥有的子树的数目</p><p>叶子结点：度为0的结点</p><p>分支结点：度不为0的结点</p><p>树的度：树中结点的最大的度</p><p>层次：根结点的层次为1，其余结点的层次等于该结点的双亲结点的层次加1</p><p>树的高度：树中结点的最大层次</p><p>森林：0个或多个不相交的树组成。对森林加上一个根，森林即成为树；删去根，树即成为森林。</p><p>二、二叉树</p><p>1、二叉树的定义</p><p>二叉树是每个结点最多有两个子树的树结构。它有五种基本形态：二叉树可以是空集；根可以有空的左子树或右子树；或者左、右子树皆为空。</p><p>  <img src="/assets/img/20170324154426661.png" alt="img"> </p><p>2、二叉树的性质</p><p>性质1：二叉树第i层上的结点数目最多为2i-1(i&gt;=1)</p><p>性质2：深度为k的二叉树至多有2k-1个结点（k&gt;=1）</p><p>性质3：包含n个结点的二叉树的高度至少为(log2n)+1</p><p>性质4：在任意一棵二叉树中，若终端结点的个数为n0，度为2的结点数为n2，则n0=n2+1</p><p>3、性质4的证明</p><p>性质4：在任意一棵二叉树中，若终端结点的个数为n0，度为2的结点数为n2，则n0=n2+1</p><p>证明：因为二叉树中所有结点的度数均不大于2，不妨设n0表示度为0的结点个数，n1表示度为1的结点个数，n2表示度为2的结点个数。三类结点加起来为总结点个数，于是便可得到：n=n0+n1+n2 (1)</p><p>由度之间的关系可得第二个等式：n=n0<em>0+n1</em>1+n2*2+1即n=n1+2n2+1 (2)</p><p>将（1）（2）组合在一起可得到n0=n2+1</p><p>三、满二叉树、完全二叉树和二叉查找树</p><p>1、满二叉树</p><p>定义：高度为h，并且由2h-1个结点组成的二叉树，称为满二叉树</p><p>2、完全二叉树</p><p>定义：一棵二叉树中，只有最下面两层结点的度可以小于2，并且最下层的叶结点集中在靠左的若干位置上，这样的二叉树称为完全二叉树。</p><p>特点：叶子结点只能出现在最下层和次下层，且最下层的叶子结点集中在树的左部。显然，一棵满二叉树必定是一棵完全二叉树，而完全二叉树未必是满二叉树。</p><p>面试题：如果一个完全二叉树的结点总数为768个，求叶子结点的个数。</p><p>由二叉树的性质知：n0=n2+1，将之带入768=n0+n1+n2中得：768=n1+2n2+1，因为完全二叉树度为1的结点个数要么为0，要么为1，那么就把n1=0或者1都代入公式中，很容易发现n1=1才符合条件。所以算出来n2=383，所以叶子结点个数n0=n2+1=384。</p><p>总结规律：如果一棵完全二叉树的结点总数为n，那么叶子结点等于n/2（当n为偶数时）或者(n+1)/2（当n为奇数时）</p><p>3、二叉查找树</p><p>定义：二叉查找树又被称为二叉搜索树。设x为二叉查找树中的一个结点，x结点包含关键字key，结点x的key值计为key[x]。如果y是x的左子树中的一个结点，则key[y]&lt;=key[x]；如果y是x的右子树的一个结点，则key[y]&gt;=key[x]</p><p>在二叉查找树种：</p><p>（1）若任意结点的左子树不空，则左子树上所有结点的值均小于它的根结点的值。</p><p>（2）任意结点的右子树不空，则右子树上所有结点的值均大于它的根结点的值。</p><p>（3）任意结点的左、右子树也分别为二叉查找树。</p><p>（4）没有键值相等的结点。</p><p>B树索引：</p><p>基于二叉树原理的一种树形结构，有根节点，子节点，叶子节点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;一、树的定义&lt;/p&gt;
&lt;p&gt;树是一种数据结构，它是由n（n&amp;gt;=1）个有限结点组成一个具有层次关系的集合。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/20170324154348019.png&quot; alt=&quot;img&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JMM</title>
    <link href="http://yoursite.com/2019/10/29/JMM/"/>
    <id>http://yoursite.com/2019/10/29/JMM/</id>
    <published>2019-10-29T12:14:11.000Z</published>
    <updated>2019-10-31T10:30:44.705Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;


      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>事务</title>
    <link href="http://yoursite.com/2019/10/29/%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/10/29/事务/</id>
    <published>2019-10-29T11:10:10.000Z</published>
    <updated>2019-10-31T11:11:39.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><a id="more"></a><ul><li>特点:<ul><li>1、原子性：事务中的语句是最小单位，不能再分割</li><li>2、隔离性：事务和事务之间是隔离的，没有任何关系</li><li>3、一致性：事务中的若干条语句，要么都执行，要么都不执行</li><li>4、永久性：事务一旦提交后，将无法回滚。</li></ul></li></ul><blockquote><p>Transaction  其实指的一组操作，里面包含许多个单一的逻辑。只要有一个逻辑没有执行成功，那么都算失败。 所有的数据都回归到最初的状态(回滚)</p></blockquote><ul><li>为什么要有事务?</li></ul><blockquote><p>为了确保逻辑的成功。 例子： 银行的转账。 </p></blockquote><p>###使用命令行方式演示事务。</p><ul><li><p>开启事务</p><p>start transaction;</p></li><li><p>提交或者回滚事务</p><p>commit; 提交事务， 数据将会写到磁盘上的数据库<br>rollback ;  数据回滚，回到最初的状态。</p></li></ul><ol><li>关闭自动提交功能。</li></ol><p><img src="/assets/img/2019103101.png" alt="icon"></p><ol start="2"><li>演示事务</li></ol><p><img src="/assets/img/2019103102.png" alt="icon"></p><p>###使用代码方式演示事务</p><blockquote><p>代码里面的事务，主要是针对连接来的。 </p><pre><code>1.  通过conn.setAutoCommit（false ）来关闭自动提交的设置。</code></pre></blockquote><blockquote><ol start="2"><li>提交事务  conn.commit();</li></ol></blockquote><blockquote><ol start="3"><li>回滚事务 conn.rollback();</li></ol></blockquote><pre><code>@Testpublic void testTransaction(){    Connection conn = null;    PreparedStatement ps = null;    ResultSet rs = null;    try {        conn = JDBCUtil.getConn();        //连接，事务默认就是自动提交的。 关闭自动提交。        conn.setAutoCommit(false);        String sql = &quot;update account set money = money - ? where id = ?&quot;;        ps = conn.prepareStatement(sql);        //扣钱， 扣ID为1 的100块钱        ps.setInt(1, 100);        ps.setInt(2, 1);        ps.executeUpdate();</code></pre><p>​            </p><pre><code>        int a = 10 /0 ;        //加钱， 给ID为2 加100块钱        ps.setInt(1, -100);        ps.setInt(2, 2);        ps.executeUpdate();        //成功： 提交事务。        conn.commit();    } catch (SQLException e) {        try {            //事变： 回滚事务            conn.rollback();        } catch (SQLException e1) {            e1.printStackTrace();        }        e.printStackTrace();    }finally {        JDBCUtil.release(conn, ps, rs);    }}</code></pre><p>###事务的特性</p><ul><li>原子性</li></ul><blockquote><p>指的是 事务中包含的逻辑，不可分割。 </p></blockquote><ul><li>一致性</li></ul><blockquote><p>指的是 事务执行前后。数据完整性</p></blockquote><ul><li>隔离性</li></ul><blockquote><p>指的是 事务在执行期间不应该受到其他事务的影响</p></blockquote><ul><li>持久性</li></ul><blockquote><p>指的是 事务执行成功，那么数据应该持久保存到磁盘上。</p></blockquote><p>###事务的安全隐患 </p><blockquote><p>不考虑隔离级别设置，那么会出现以下问题。</p></blockquote><ul><li>读</li></ul><blockquote><p>脏读 不可重读读  幻读.</p></blockquote><pre><code>* 脏读&gt; 一个事务读到另外一个事务还未提交的数据* 不可重复读 &gt; 一个事务读到了另外一个事务提交的数据 ，造成了前后两次查询结果不一致。</code></pre><p>####读未提交 演示</p><ol><li><p>设置A窗口的隔离级别为 读未提交<br><img src="/assets/img/2019103103.png" alt="icon"></p></li><li><p>两个窗口都分别开启事务</p></li></ol><p><img src="/assets/img/2019103104.png" alt="icon"></p><ul><li>写</li></ul><blockquote><p>丢失更新</p></blockquote><h4 id="读已提交演示"><a href="#读已提交演示" class="headerlink" title="读已提交演示"></a>读已提交演示</h4><ol><li>设置A窗口的隔离级别为 读已提交</li></ol><p><img src="/assets/img/2019103105.png" alt="icon"></p><ol start="2"><li>A B 两个窗口都开启事务， 在B窗口执行更新操作。</li></ol><p><img src="/assets/img/2019103106.png" alt="icon"></p><ol start="3"><li>在A窗口执行的查询结果不一致。 一次是在B窗口提交事务之前，一次是在B窗口提交事务之后。</li></ol><p><img src="/assets/img/2019103107.png" alt="icon"></p><blockquote><p>这个隔离级别能够屏蔽 脏读的现象， 但是引发了另一个问题  ，不可重复读。</p></blockquote><p>###可串行化</p><blockquote><p>如果有一个连接的隔离级别设置为了串行化 ，那么谁先打开了事务， 谁就有了先执行的权利， 谁后打开事务，谁就只能得着，等前面的那个事务，提交或者回滚后，才能执行。  但是这种隔离级别一般比较少用。 容易造成性能上的问题。 效率比较低。</p></blockquote><ul><li>按效率划分，从高到低</li></ul><blockquote><p>读未提交  &gt; 读已提交  &gt; 可重复读  &gt; 可串行化</p></blockquote><ul><li>按拦截程度 ，从高到底</li></ul><blockquote><p>可串行化 &gt; 可重复读 &gt; 读已提交 &gt;  读未提交</p></blockquote><p>##事务总结</p><p>###需要掌握的</p><ol><li><p>在代码里面会使用事务 </p><p>conn.setAutoCommit(false);</p></li></ol><pre><code>conn.commit();conn.rollback();</code></pre><ol start="2"><li><p>事务只是针对连接连接对象，如果再开一个连接对象，那么那是默认的提交。</p></li><li><p>事务是会自动提交的。 </p></li></ol><p>###需要了解的</p><p>####安全隐患</p><pre><code>读    脏读        一个事务读到了另一个事务未提交的数据    不可重复读        一个事务读到了另一个事务已提交的数据，造成前后两次查询结果不一致    幻读        一个事务读到了另一个事务insert的数据 ，造成前后查询结果不一致 。写    丢失更新。</code></pre><p>####隔离级别</p><p>读未提交</p><blockquote><p>引发问题： 脏读 </p></blockquote><p>读已提交</p><blockquote><p>解决： 脏读 ， 引发： 不可重复读</p></blockquote><p>可重复读</p><blockquote><p>解决： 脏读 、 不可重复读 ， 未解决： 幻读</p></blockquote><p>可串行化</p><blockquote><p>解决： 脏读、 不可重复读 、 幻读。</p></blockquote><p>mySql 默认的隔离级别是 可重复读</p><p>Oracle 默认的隔离级别是  读已提交</p><p>###丢失更新</p><p><img src="/assets/img/2019103108.png" alt="icon"></p><p>###解决丢失更新</p><ul><li>悲观锁</li></ul><blockquote><p>可以在查询的时候，加入 for update</p></blockquote><p><img src="/assets/img/2019103109.png" alt="icon"></p><ul><li>乐观锁</li></ul><blockquote><p>要求程序员自己控制。 </p></blockquote><p><img src="/assets/img/2019103110.png" alt="icon"></p><p>##数据库连接池</p><blockquote><ol><li>数据库的连接对象创建工作，比较消耗性能。 </li></ol></blockquote><blockquote><p>2.一开始现在内存中开辟一块空间（集合） ， 一开先往池子里面放置 多个连接对象。  后面需要连接的话，直接从池子里面去。不要去自己创建连接了。  使用完毕， 要记得归还连接。确保连接对象能循环利用。</p></blockquote><p><img src="/assets/img/2019103111.png" alt="icon"></p><p>###自定义数据库连接池 </p><ul><li><p>代码实现</p></li><li><p>出现的问题：</p><ol><li><p>需要额外记住 addBack方法</p><ol start="2"><li><p>单例。</p></li><li><p>无法面向接口编程。 </p><p> UserDao dao = new UserDaoImpl();<br> dao.insert();</p></li></ol></li></ol></li></ul><pre><code>DataSource dataSource = new MyDataSource();因为接口里面没有定义addBack方法。  4. 怎么解决?   以addBack 为切入点。</code></pre><p>###解决自定义数据库连接池出现的问题。 </p><blockquote><p>由于多了一个addBack 方法，所以使用这个连接池的地方，需要额外记住这个方法，并且还不能面向接口编程。</p></blockquote><blockquote><p>我们打算修改接口中的那个close方法。  原来的Connection对象的close方法，是真的关闭连接。<br>打算修改这个close方法，以后在调用close， 并不是真的关闭，而是归还连接对象。</p></blockquote><p>###如何扩展某一个方法?</p><blockquote><p>原有的方法逻辑，不是我们想要的。 想修改自己的逻辑</p></blockquote><ol><li><p>直接改源码  无法实现。</p></li><li><p>继承， 必须得知道这个接口的具体实现是谁。 </p></li><li><p>使用装饰者模式。 </p></li></ol><p>##开源连接池</p><h4 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a>DBCP</h4><ol><li><p>导入jar文件</p></li><li><p>不使用配置文件：</p></li></ol><pre><code>public void testDBCP01(){</code></pre><p>​            </p><pre><code>Connection conn = null;PreparedStatement ps = null;try {    //1. 构建数据源对象    BasicDataSource dataSource = new BasicDataSource();    //连的是什么类型的数据库， 访问的是哪个数据库 ， 用户名， 密码。。    //jdbc:mysql://localhost/bank 主协议：子协议 ://本地/数据库    dataSource.setDriverClassName(&quot;com.mysql.jdbc.Driver&quot;);    dataSource.setUrl(&quot;jdbc:mysql://localhost/bank&quot;);    dataSource.setUsername(&quot;root&quot;);    dataSource.setPassword(&quot;root&quot;);</code></pre><p>​                </p><pre><code>        //2. 得到连接对象        conn = dataSource.getConnection();        String sql = &quot;insert into account values(null , ? , ?)&quot;;        ps = conn.prepareStatement(sql);        ps.setString(1, &quot;admin&quot;);        ps.setInt(2, 1000);        ps.executeUpdate();    } catch (SQLException e) {        e.printStackTrace();    }finally {        JDBCUtil.release(conn, ps);    }}</code></pre><ol start="2"><li>使用配置文件方式：</li></ol><pre><code>Connection conn = null;PreparedStatement ps = null;try {    BasicDataSourceFactory factory = new BasicDataSourceFactory();    Properties properties = new Properties();    InputStream is = new FileInputStream(&quot;src//dbcpconfig.properties&quot;);    properties.load(is);    DataSource dataSource = factory.createDataSource(properties);    //2. 得到连接对象    conn = dataSource.getConnection();    String sql = &quot;insert into account values(null , ? , ?)&quot;;    ps = conn.prepareStatement(sql);    ps.setString(1, &quot;liangchaowei&quot;);    ps.setInt(2, 100);    ps.executeUpdate();} catch (Exception e) {    e.printStackTrace();}finally {    JDBCUtil.release(conn, ps);}</code></pre><p>​        </p><ul><li>C3P0</li></ul><blockquote><p>拷贝jar文件 到 lib目录</p></blockquote><p>###不使用配置文件方式</p><pre><code>Connection conn = null;PreparedStatement ps = null;try {    //1. 创建datasource    ComboPooledDataSource dataSource = new ComboPooledDataSource();    //2. 设置连接数据的信息    dataSource.setDriverClass(&quot;com.mysql.jdbc.Driver&quot;);    //忘记了---&gt; 去以前的代码 ---&gt; jdbc的文档    dataSource.setJdbcUrl(&quot;jdbc:mysql://localhost/bank&quot;);    dataSource.setUser(&quot;root&quot;);    dataSource.setPassword(&quot;root&quot;);    //2. 得到连接对象    conn = dataSource.getConnection();    String sql = &quot;insert into account values(null , ? , ?)&quot;;    ps = conn.prepareStatement(sql);    ps.setString(1, &quot;admi234n&quot;);    ps.setInt(2, 103200);    ps.executeUpdate();} catch (Exception e) {    e.printStackTrace();}finally {    JDBCUtil.release(conn, ps);}</code></pre><p>###使用配置文件方式</p><pre><code>//默认会找 xml 中的 default-config 分支。 ComboPooledDataSource dataSource = new ComboPooledDataSource();//2. 设置连接数据的信息dataSource.setDriverClass(&quot;com.mysql.jdbc.Driver&quot;);//忘记了---&gt; 去以前的代码 ---&gt; jdbc的文档dataSource.setJdbcUrl(&quot;jdbc:mysql://localhost/bank&quot;);dataSource.setUser(&quot;root&quot;);dataSource.setPassword(&quot;root&quot;);//2. 得到连接对象conn = dataSource.getConnection();String sql = &quot;insert into account values(null , ? , ?)&quot;;ps = conn.prepareStatement(sql);ps.setString(1, &quot;admi234n&quot;);ps.setInt(2, 103200);</code></pre><p>##DBUtils</p><p>###增删改</p><pre><code>        //dbutils 只是帮我们简化了CRUD 的代码， 但是连接的创建以及获取工作。 不在他的考虑范围QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());</code></pre><p>​        </p><pre><code>//增加//queryRunner.update(&quot;insert into account values (null , ? , ? )&quot;, &quot;aa&quot; ,1000);//删除//queryRunner.update(&quot;delete from account where id = ?&quot;, 5);//更新//queryRunner.update(&quot;update account set money = ? where id = ?&quot;, 10000000 , 6);</code></pre><p>###查询</p><ol><li>直接new接口的匿名实现类</li></ol><pre><code>QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());Account  account =  queryRunner.query(&quot;select * from account where id = ?&quot;, new ResultSetHandler&lt;Account&gt;(){    @Override    public Account handle(ResultSet rs) throws SQLException {        Account account  =  new Account();        while(rs.next()){            String name = rs.getString(&quot;name&quot;);            int money = rs.getInt(&quot;money&quot;);            account.setName(name);            account.setMoney(money);        }        return account;    } }, 6);System.out.println(account.toString());</code></pre><ol start="2"><li>直接使用框架已经写好的实现类。</li></ol><pre><code>* 查询单个对象    QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());    //查询单个对象    Account account = queryRunner.query(&quot;select * from account where id = ?&quot;,             new BeanHandler&lt;Account&gt;(Account.class), 8);</code></pre><p>​    </p><pre><code>* 查询多个对象    QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());    List&lt;Account&gt; list = queryRunner.query(&quot;select * from account &quot;,            new BeanListHandler&lt;Account&gt;(Account.class));</code></pre><p>###ResultSetHandler 常用的实现类<br>以下两个是使用频率最高的</p><pre><code>BeanHandler,  查询到的单个数据封装成一个对象BeanListHandler, 查询到的多个数据封装 成一个List&lt;对象&gt;</code></pre><hr><pre><code>ArrayHandler,  查询到的单个数据封装成一个数组ArrayListHandler,  查询到的多个数据封装成一个集合 ，集合里面的元素是数组。 </code></pre><p>​<br>​    </p><pre><code>MapHandler,  查询到的单个数据封装成一个mapMapListHandler,查询到的多个数据封装成一个集合 ，集合里面的元素是map。 </code></pre><p>ColumnListHandler<br>KeyedHandler<br>ScalarHandler</p><p>#总结</p><p>##事务</p><pre><code>使用命令行演示使用代码演示</code></pre><p>脏读、</p><p>不可重复读、</p><p>幻读<br>丢失更新</p><pre><code>悲观锁乐观锁4个隔离级别    读未提交    读已提交    可重复读    可串行化</code></pre><p>##数据连接池</p><ul><li><p>DBCP</p><p>不使用配置</p><p>使用配置</p></li><li><p>C3P0</p><p>不使用配置</p><p>使用配置 （必须掌握）</p></li><li><p>自定义连接池 </p><p>装饰者模式</p></li></ul><p>##DBUtils</p><blockquote><p>简化了我们的CRUD ， 里面定义了通用的CRUD方法。 </p></blockquote><pre><code>queryRunner.update();queryRunner.query</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>红黑树</title>
    <link href="http://yoursite.com/2019/10/29/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://yoursite.com/2019/10/29/红黑树/</id>
    <published>2019-10-29T09:17:38.000Z</published>
    <updated>2019-10-31T10:31:00.659Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>oracle数据库</title>
    <link href="http://yoursite.com/2019/10/29/oracle%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2019/10/29/oracle数据库/</id>
    <published>2019-10-29T01:00:36.000Z</published>
    <updated>2019-10-31T10:30:25.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><a id="more"></a><p>Oracle ORCL VSS Writer Service 可以禁用</p><p>Listener 和OracleServiceORCL改为手动</p><ul><li>登录oracle:<ul><li>用户名:sys</li><li>密码:root</li><li>database:orcl</li></ul></li></ul><ul><li><p>oracle 数据库:一个大的磁盘空间</p><p>在大的磁盘空间中去创建表空间,对应着文件,有名字,对应着一个用户</p><p>sys/stytem 管理员</p><p>在创建数据库的同时,默认创建了system表空间,存放系统用户的信息.</p><p>​    oracle创建了实例用户, 用户名:scott 密码:tiger,默认是锁定的.需要用sys帐户登录后,找到<code>user</code>表,-&gt;scott-&gt;右键edit-&gt;general-&gt;Account locked勾掉,上面Role privileges选项卡,把Grantable下的两个都勾上.</p><p>再次登录,身份是normal</p></li></ul><h3 id="sys-和system用户"><a href="#sys-和system用户" class="headerlink" title="sys 和system用户"></a>sys 和system用户</h3><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1572319243175.png" alt="1572319243175"></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>varchar2(size) 变长字符串</li><li>char(size) 固定长度字符串</li><li>number(p,s) 变长数值</li><li>date 日期和时间值</li><li>long 可存放最多2GB的变长字符数据</li><li>clob 可存放最多4GB的变长数据</li><li>RAW and long RAW 二进制数据</li><li>BLOB 可存放最多4GB二进制数据</li></ul><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><p>和MySQL差不多</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建OA系统的表空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> oaspace</span><br><span class="line"><span class="keyword">datafile</span> <span class="string">'D:\gezhongGJ\oracle\space\oa.dbf'</span></span><br><span class="line"><span class="keyword">size</span> <span class="number">10</span>M;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建用户，来管理表空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> wangwu <span class="keyword">identified</span> <span class="keyword">by</span> <span class="number">123456</span> <span class="keyword">default</span> <span class="keyword">tablespace</span> oaspace;</span><br><span class="line"></span><br><span class="line"><span class="comment">--dab</span></span><br><span class="line"><span class="comment">--分配权限/角色 用角色管理权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>,<span class="keyword">resource</span> <span class="keyword">to</span> wangwu</span><br><span class="line"></span><br><span class="line"><span class="comment">--撤销权限/角色</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">resource</span> <span class="keyword">from</span> wangwu</span><br><span class="line"><span class="comment">--以上语句的执行需要sys用户</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--创建表需要切换用户，用户使用的是自己的空间；使用哪个用户登录，表就创建在哪个用户的表空间中</span></span><br><span class="line"><span class="comment">--创建用户表</span></span><br><span class="line"><span class="comment">--如果表名或列名是数据库的关键字，在关键字两旁使用`id`</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> oa_users(</span><br><span class="line">       user_id <span class="built_in">integer</span> primary <span class="keyword">key</span>,</span><br><span class="line">       user_name varchar2(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">       age <span class="built_in">integer</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">--check 约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> oa_users</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraints</span> CK_AGE <span class="keyword">check</span>(age <span class="keyword">between</span> <span class="number">18</span> <span class="keyword">and</span> <span class="number">65</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> oa_users <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">'王五'</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> oa_users;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表 </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students(</span><br><span class="line">       stuno <span class="built_in">char</span>(<span class="number">10</span>) primary <span class="keyword">key</span>,</span><br><span class="line">       stuname varchar2(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">       joindate <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="string">'jsj1001'</span>,<span class="string">'张三'</span>,<span class="string">'29-10月-2019'</span>);</span><br><span class="line"><span class="comment">--利用时间函数</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="string">'jsj1002'</span>,<span class="string">'李四'</span>,<span class="keyword">sysdate</span>);</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> students</span><br><span class="line"></span><br><span class="line"><span class="comment">--插入的数据通过查询得到</span></span><br><span class="line"><span class="comment">--复制一个表 scott</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mydept <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept <span class="keyword">where</span> <span class="number">1</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mydept</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept <span class="keyword">where</span> deptno=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mydept</span><br><span class="line"><span class="keyword">select</span> <span class="number">20</span>,dname,loc <span class="keyword">from</span> dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mydept <span class="keyword">for</span> <span class="keyword">update</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新子查询</span></span><br><span class="line"><span class="keyword">update</span> mydept <span class="keyword">set</span> (dname,loc)=(<span class="keyword">select</span> dname,loc <span class="keyword">from</span> mydept <span class="keyword">where</span> deptno = <span class="number">10</span>) <span class="keyword">where</span> deptno = <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--连接符操作，列的合并 '-'拼接</span></span><br><span class="line"><span class="keyword">select</span> dname ||<span class="string">'-'</span>||loc <span class="keyword">from</span> mydept</span><br><span class="line"></span><br><span class="line"><span class="comment">--从员工表中查询所在的部门编号</span></span><br><span class="line"><span class="comment">--消除重复行的数据</span></span><br><span class="line"><span class="keyword">select</span> dname <span class="keyword">from</span> dept <span class="keyword">where</span> deptno <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> emp )</span><br><span class="line"><span class="keyword">select</span> emp1.deptno,dept.dname <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> emp) emp1,dept <span class="keyword">where</span> dept.deptno = emp1.deptno</span><br><span class="line"></span><br><span class="line"><span class="comment">--简单子查询 &gt;= &gt; &lt; &lt;= = !=</span></span><br><span class="line"><span class="comment">--复杂子查询</span></span><br><span class="line"><span class="comment">--批量删除 sql</span></span><br><span class="line"><span class="comment">--把要删除的主键值存入数组，集合</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> mydept <span class="keyword">where</span> deptno <span class="keyword">in</span> (<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询各个部门的员工信息</span></span><br><span class="line"><span class="comment">--子查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> sal <span class="keyword">from</span> emp <span class="keyword">where</span> ename = <span class="string">'SCOTT'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--联合查询 把多条select的查询结果整合到一个查询结果中</span></span><br><span class="line"><span class="comment">--条件:1.列的数量相同</span></span><br><span class="line"><span class="comment">--     2.列的类型和长度要对应</span></span><br><span class="line"><span class="keyword">select</span> deptno,dname <span class="keyword">from</span> dept <span class="keyword">union</span> <span class="keyword">all</span> <span class="keyword">select</span> deptno,dname <span class="keyword">from</span> mydept</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> deptno,dname <span class="keyword">from</span> dept <span class="keyword">union</span>  <span class="keyword">select</span> deptno,dname <span class="keyword">from</span> mydept</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> view_emps <span class="keyword">as</span> <span class="keyword">select</span> ename,job,dname <span class="keyword">from</span> emp <span class="keyword">inner</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno = dept.deptno;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> view_emps</span><br></pre></td></tr></table></figure><h2 id="与Java连接"><a href="#与Java连接" class="headerlink" title="与Java连接"></a>与Java连接</h2><p>与MySQL的区别：</p><ol><li><p>jar包</p></li><li><p>驱动名:oracle.jdbc.driver.OracleDriver</p></li><li><p>url</p></li></ol><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><ul><li>自动产生唯一数值</li><li>是一个可共享的对象</li><li>用于主键值的创建</li><li>当序列驻留在缓存中时，可以有效地提高序列的访问效率</li><li>序列数值的产生及存储与表无关</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--序列的使用</span></span><br><span class="line"><span class="comment">--1.创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(</span><br><span class="line">tid <span class="built_in">number</span>(<span class="number">5</span>,<span class="number">0</span>) primary <span class="keyword">key</span>,</span><br><span class="line">tname varchar2(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2(</span><br><span class="line">tid <span class="built_in">number</span>(<span class="number">5</span>,<span class="number">0</span>) primary <span class="keyword">key</span>,</span><br><span class="line">tname varchar2(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">--创建序列</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">sequence</span> seq_id </span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> <span class="number">10</span> <span class="comment">--从10开始</span></span><br><span class="line"><span class="keyword">increment</span> <span class="keyword">by</span> <span class="number">2</span>  <span class="comment">--自增2</span></span><br><span class="line"><span class="keyword">nomaxvalue</span>   <span class="comment">--没有最大值限制</span></span><br><span class="line"><span class="keyword">nocycle</span>   <span class="comment">--不循环产生</span></span><br><span class="line"><span class="keyword">cache</span> <span class="number">10</span>;  <span class="comment">--缓存10个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>(seq_id.nextval,<span class="string">'aaa'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 <span class="keyword">values</span>(seq_id.nextval,<span class="string">'bbb'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t1;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> seq_id.currval <span class="keyword">from</span> dual; <span class="comment">--最近产生的最后一个序列值，dual存放值</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_sequences;    <span class="comment">--查看所有序列的详细情况，sequences存放序列信息</span></span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>帮助数据库快速查询数据，相当于目录</p></blockquote><p>当在表中创建主键(PRIMARY KEY)\唯一键(UNIQUE)后，会自动创建主键索引\唯一键索引</p><h3 id="创建索引的原则"><a href="#创建索引的原则" class="headerlink" title="创建索引的原则"></a>创建索引的原则</h3><ul><li>经常用于where子句或作为连接条件的列</li><li>所含数据值范围比较大的列</li><li>含有大量空值的列</li><li>表比较大，但大部分查询返回的结果集小于其总记录的2%-4%</li><li>频繁更新的表不建议用索引</li></ul><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><ul><li>从创建的角度：<ul><li>自动索引</li><li>手动索引</li></ul></li><li>从索引的存储结构：<ul><li>B-Tree索引</li><li>Hash索引</li></ul></li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>堆栈</li><li>队列</li><li>二叉树</li><li>平衡二叉树<ul><li>左右子树高度差的绝对值不能超过1，且左右子树都是平衡二叉树</li></ul></li><li>B-树</li></ul><h2 id="PL-SQL编程"><a href="#PL-SQL编程" class="headerlink" title="PL/SQL编程"></a>PL/SQL编程</h2><ul><li><p>基本语法</p><p>BEGIN</p><p>EXCEPTION</p><p>LOOP</p><p>END</p></li><li><p>常量，变量</p><ul><li>声明变量：</li><li>声明常量：</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--PL-SQL编程</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  v_name varchar2(<span class="number">30</span>);</span><br><span class="line">  <span class="comment">--声明变量的数据类型和表中的某个列的类型一致</span></span><br><span class="line">  V_job emp.job%type; </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">-- 给变量赋值</span></span><br><span class="line">  v_name:=<span class="string">'王五'</span>;</span><br><span class="line"><span class="comment">--通过select给变量赋值，要保证查询结果的唯一性：添加查询条件</span></span><br><span class="line">  <span class="keyword">select</span> ename <span class="keyword">into</span> v_name <span class="keyword">from</span> emp <span class="keyword">where</span> empno = <span class="number">7788</span>;</span><br><span class="line">  <span class="keyword">select</span> job <span class="keyword">into</span> v_job <span class="keyword">from</span> emp <span class="keyword">where</span> empno = <span class="number">7788</span>;</span><br><span class="line">    <span class="comment">--合并编写</span></span><br><span class="line">  <span class="keyword">select</span> ename,job <span class="keyword">into</span> v_name,v_job <span class="keyword">from</span> emp <span class="keyword">where</span> empno=<span class="number">7788</span>;</span><br><span class="line">  <span class="comment">--输出变量的值</span></span><br><span class="line">  dbms_output.put_line(v_name);</span><br><span class="line">  dbms_output.put_line('job:'||'<span class="comment">--------------------------------'||v_job);</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><ol><li><p>sysdate 赋值当前时间</p></li><li><p>val</p></li><li><p>NVL(sal,0) 如果sal列为null，用0替代</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sal,job,nvl(comm,<span class="number">0</span>)+sal <span class="keyword">as</span> totalsal <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></li><li><p>decode(列名,值1,执行1,值2,执行2,…..)</p><p>相当于多个if</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal,<span class="keyword">decode</span>(job,<span class="string">'SALESMAN'</span>,<span class="string">'销售人员'</span>,<span class="string">'CLERK'</span>,<span class="string">'文职'</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></li><li><p>&amp;：输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PL/SQL输入部门</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  v_dno dept.deptno%<span class="keyword">type</span>;</span><br><span class="line">  v_dname dept.dname%type;</span><br><span class="line">  v_loc dept.loc%type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">-- 变量赋值为输入的值，&amp;后面的名字随意</span></span><br><span class="line">  v_dno:=&amp;dno;</span><br><span class="line">  v_dname:='&amp;dname'; <span class="comment">--字符串，日期类型需要加引号</span></span><br><span class="line">  v_loc:='&amp;dloc';</span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(v_dno,v_dname,v_loc);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>if</p><p>if…then…;</p><p>​    else…;</p><p>end if    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--输入员工编号和目前薪资，判断</span></span><br><span class="line"><span class="comment">--如果薪资&lt;2500，加薪1000；否则加薪500；</span></span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">  v_empno emp.empno%<span class="keyword">type</span>;</span><br><span class="line">  v_sal emp.sal%type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  v_empno:=&amp;eno;</span><br><span class="line">  v_sal:=&amp;sal;</span><br><span class="line">  if v_sal&lt;2500</span><br><span class="line">    then </span><br><span class="line">      <span class="keyword">update</span> emp <span class="keyword">set</span> sal = sal+<span class="number">1000</span> <span class="keyword">where</span> empno = v_empno;</span><br><span class="line">    else</span><br><span class="line">      <span class="keyword">update</span> emp <span class="keyword">set</span> sal = sal + <span class="number">500</span> <span class="keyword">where</span> empno = v_empno;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>case 基本不用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--case when-then</span></span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">  v_empno emp.empno%<span class="keyword">type</span>;</span><br><span class="line">  v_sal emp.sal%type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  v_empno:=&amp;eno;</span><br><span class="line">  v_sal:=&amp;sal;</span><br><span class="line">       case</span><br><span class="line">       when v_sal &lt; 2500 then update emp set sal = sal+1000 where empno = v_empno;</span><br><span class="line">       when v_sal &gt; 2500 then update emp set sal = sal + 500 where empno = v_empno;</span><br><span class="line">       <span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">     <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>loop</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--loop循环</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  v_age <span class="built_in">number</span>(<span class="number">3</span>,<span class="number">0</span>):=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">loop</span></span><br><span class="line">      <span class="keyword">if</span> v_age&gt;=<span class="number">18</span> <span class="keyword">then</span> <span class="keyword">exit</span>;</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">      v_age:=v_age+1;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">    dbms_output.put_line('v_age='||v_age);</span><br><span class="line">  <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>while</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--while</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_num <span class="built_in">number</span>(<span class="number">3</span>,<span class="number">0</span>):=<span class="number">1</span>;</span><br><span class="line">v_sum number(6,0):=0;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">while</span> v_num &lt;=<span class="number">100</span> <span class="keyword">loop</span></span><br><span class="line">    v_sum := v_sum+v_num;</span><br><span class="line">    v_num := v_num+1;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">    dbms_output.put_line('v_sum='||v_sum);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>for</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--for</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">v_num <span class="built_in">number</span>(<span class="number">4</span>,<span class="number">0</span>):=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span> <span class="keyword">loop</span></span><br><span class="line">    v_num:=v_num+i;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">  dbms_output.put_line('v_num='||v_num);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li></ol><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><blockquote><p>存储过程和函数以命名的数据库对象形式存储于数据库中</p></blockquote><ul><li>创建存储过程</li></ul><blockquote><p>当定义存储过程的参数时，只能指定数据类型，不能指定数据长度</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--计算部门员工个数的存储过程：参数 部门编号</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> pro_countemp(dno emp.deptno%<span class="keyword">type</span>)</span><br><span class="line"><span class="keyword">is</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> v_count <span class="built_in">number</span>(<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(empno) <span class="keyword">into</span> v_count <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = dno;</span><br><span class="line">    dbms_output.put_line(v_count);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span> pro_countemp; <span class="comment">--end后面的名字加不加都行</span></span><br><span class="line"><span class="comment">--调用存储过程</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  pro_countemp(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>输入输出参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--存储过程：完成业务功能处理，不能返回值</span></span><br><span class="line"><span class="comment">--存储过程的参数类型：in 输入参数--向存储过程内传递值</span></span><br><span class="line"><span class="comment">--                      out 输出参数--得到存储过程里的值</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> pro_countemp2(dno <span class="keyword">in</span> emp.deptno%<span class="keyword">type</span>,empcount <span class="keyword">out</span> <span class="built_in">number</span>)</span><br><span class="line"><span class="keyword">is</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> v_count <span class="built_in">number</span>(<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(empno) <span class="keyword">into</span> v_count <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = dno;</span><br><span class="line">    dbms_output.put_line(v_count);</span><br><span class="line">    empcount:=v_count;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span> pro_countemp2;</span><br><span class="line"><span class="comment">--调用存储过程</span></span><br><span class="line"><span class="keyword">declare</span> v_count <span class="built_in">number</span>(<span class="number">3</span>,<span class="number">0</span>):=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  pro_countemp2(<span class="number">10</span>,v_count);</span><br><span class="line">  <span class="comment">--输出v_count的值</span></span><br><span class="line">  dbms_output.put_line(v_count);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--申明函数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> fun_countemp(dno emp.deptno%<span class="keyword">type</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">is</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> v_count <span class="built_in">number</span>(<span class="number">3</span>,<span class="number">0</span>):=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">          <span class="keyword">select</span> <span class="keyword">count</span>(empno) <span class="keyword">into</span> v_count <span class="keyword">from</span> emp <span class="keyword">where</span> deptno = dno;</span><br><span class="line">   return v_count;</span><br><span class="line">   <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="comment">--调用函数</span></span><br><span class="line"><span class="comment">--声明接收返回值的变量</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  v_empCount <span class="built_in">number</span>(<span class="number">3</span>,<span class="number">0</span>):=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    v_empCount:=fun_countemp(<span class="number">10</span>);</span><br><span class="line">    dbms_output.put_line(v_empCount);</span><br><span class="line">  <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h2 id="常见的数据库系统函数"><a href="#常见的数据库系统函数" class="headerlink" title="常见的数据库系统函数"></a>常见的数据库系统函数</h2><p>1.全局变量</p><p>@@DATEFIRST:返回当前设置的一周的第一天<br>@@ERROR:返回当前连接中最后执行sql语句的错误代码<br>@@IDENTITY:返回当前连接中作为最后一条insert或者select into 语句的结果插入的标识值（最后插入的标识值）<br>@@OPTIONS:返回通过使用set命令设置的选择的信息<br>@@REMSERVER:仅在存储过程中使用，返回调用存储过程的服务器的值<br>@@ROWCOUNT:返回最后一条语句所影响的行数<br>@@SERVERNAME:返回正在运行脚本的本地服务器的名称<br>@@TRANCOUNT:返回当前连接的活动事务数（实质是事务嵌套级别）<br>@@VERSION:返回当前的SQL SERVER安装版本以及日期，处理器和O/S体系结构</p><p>SCOPE_IDENTITY()类似@IDENTITY，但返回在当前会话和作用域中插入的最后一个标识，<br>SCOPE_IDENTITY() 只返回插入到当前作用域中的值；@@IDENTITY 不受限于特定的作用域。</p><p>2.检索错误的系统函数<br>ERROR_NUMBER():实际错误号，若在存储过程里，只在catch块中有效<br>ERROR_SEVERITY():错误级别<br>ERROR_STATE():位置标记<br>ERROR_PROCEDURE():使用不多因为他只与存储过程，函数和触发器相关。这提供了导致错误的存储过程的名称<br>ERROR_LINE():错误所在的行号<br>ERROR_MESSAGE():消息文本</p><p>3.日期和时间函数<br>（表示所需取的时段：原词-缩写（year-yy，month-mm,day-dd,hour-hh,minute-mi,second-ss）  ）<br>datepart(hh,日期字段)獲取這個字段的小時<br>dateadd(yy,4,日期字段)将这个字段往后加四年（日期/时间值上加上日期单位间隔）可以增加需要處理的任意長的時間<br>eg:dateadd(yy,4,’2018-4-4’)—-结果是：2022-4-4 00:00:00:0000<br>datediff(month,日期字段1，日期字段2)返回两个时间之间的差值<br>eg:datediff(month,’2018-8-8’,’2018-12.9’)—结果是：4个月<br>getdate():返回当前日期时间</p><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><blockquote><p>游标是数据段的一个内存空间，存放select查询结果，可以对游标中的数据进行提取使用</p></blockquote><p>分类：</p><ol><li><p>显示游标：</p><p>声明游标： 把select的结果存入对应的内存空间中</p><p>打开游标：<br>提取游标：提取游标中的数据<br>关闭游标：2、隐式游标：系统自带游标</p></li></ol><p>使用方式1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--声明游标</span></span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  <span class="keyword">cursor</span> cur_emp <span class="keyword">is</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">30</span>;</span><br><span class="line">  <span class="comment">--声明 cur_emp游标类型的一个变量</span></span><br><span class="line">  c cur_emp%rowtype;</span><br><span class="line">  <span class="comment">--存放总薪资</span></span><br><span class="line">  v_sum emp.sal%type:=0;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">--for遍历提取游标中的数据</span></span><br><span class="line"><span class="comment">--在循环中自动打开关闭游标</span></span><br><span class="line">  <span class="keyword">for</span> c <span class="keyword">in</span> cur_emp <span class="keyword">loop</span></span><br><span class="line">    dbms_output.put_line(c.empno||<span class="string">'====='</span>||c.ename);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">  dbms_output.put_line('30部门的总薪资是:'||v_sum);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>使用方式2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">  <span class="keyword">cursor</span> cur_emp2 <span class="keyword">is</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> deptno=<span class="number">30</span>;</span><br><span class="line">  c cur_emp2%rowtype;</span><br><span class="line">  v_sum emp.sal%type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">--打开游标</span></span><br><span class="line">  <span class="keyword">open</span> cur_emp2;</span><br><span class="line">  loop</span><br><span class="line">  <span class="comment">--提取游标中的数据，每次提取一行</span></span><br><span class="line">  fetch cur_emp2 into c;</span><br><span class="line">  <span class="comment">--循环结束条件</span></span><br><span class="line">  exit when cur_emp2%notfound;</span><br><span class="line">  v_sum:=v_sum+c.sal;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">  <span class="comment">--关闭游标</span></span><br><span class="line">  close cur_emp2;</span><br><span class="line">  dbms_output.put_line('30部门的总薪资是:'||v_sum);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><ul><li>游标的属性：</li></ul><p>%notfound:fetch是否提取到数据,没有true;提取到false;</p><p>%found:与notfound相反</p><p>%rowcount:</p><p>%isopen:布尔值，游标是否已经打开</p><ul><li><p>动态游标</p></li><li><p>游标参数</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Oracle&quot;&gt;&lt;a href=&quot;#Oracle&quot; class=&quot;headerlink&quot; title=&quot;Oracle&quot;&gt;&lt;/a&gt;Oracle&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="DB" scheme="http://yoursite.com/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>jvm</title>
    <link href="http://yoursite.com/2019/10/28/jvm/"/>
    <id>http://yoursite.com/2019/10/28/jvm/</id>
    <published>2019-10-28T12:54:48.000Z</published>
    <updated>2019-10-31T10:31:08.668Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>栈帧</p><p>对象头</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;栈帧&lt;/p&gt;
&lt;p&gt;对象头&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>maven的resource配置</title>
    <link href="http://yoursite.com/2019/10/22/maven%E7%9A%84resource%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/10/22/maven的resource配置/</id>
    <published>2019-10-22T01:55:30.000Z</published>
    <updated>2019-10-31T10:31:18.603Z</updated>
    
    <content type="html"><![CDATA[ <a id="more"></a><p>一直报错找不到loginUser方法</p><p><code>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): xx.dao.UserDao.loginUser</code></p><p>因为UserDao对应的mapper.xml文件写在了java&gt;dao&gt;mapper下</p><hr><p>构建Maven项目的时候，如果没有进行特殊的配置，Maven会按照标准的目录结构查找和处理各种类型文件</p><p><code>src/main/java和src/test/java</code> 这两个目录中的所有*.java文件会分别在comile和test-comiple阶段被编译，编译结果分别放到了target/classes和targe/test-classes目录中，但是这两个目录中的其他文件都会被忽略掉。</p>]]></content>
    
    <summary type="html">
    
      
      
         &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;一直报错找不到loginUser方法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): xx.d
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="error" scheme="http://yoursite.com/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>报错:Bean must be of &#39;org.apache.ibatis.plugin.Interceptor&#39; type</title>
    <link href="http://yoursite.com/2019/10/21/%E6%8A%A5%E9%94%99-Bean-must-be-of-org-apache-ibatis-plugin-Interceptor-type/"/>
    <id>http://yoursite.com/2019/10/21/报错-Bean-must-be-of-org-apache-ibatis-plugin-Interceptor-type/</id>
    <published>2019-10-21T09:30:22.000Z</published>
    <updated>2019-10-31T10:31:29.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="报错-Bean-must-be-of-‘org-apache-ibatis-plugin-Interceptor’-type"><a href="#报错-Bean-must-be-of-‘org-apache-ibatis-plugin-Interceptor’-type" class="headerlink" title="报错:Bean must be of ‘org.apache.ibatis.plugin.Interceptor’ type"></a>报错:Bean must be of ‘org.apache.ibatis.plugin.Interceptor’ type</h1><a id="more"></a><p>在5.x版本，mybatis-config.xml中配置pageHelper的格式为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- config params as the following --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--分页参数合理化--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"reasonable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在4.x版本中，mybatis-config.xml中的配置为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- config params as the following --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"reasonable "</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name="dialect" value="mysql" /&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在5.0的版本下用了4.x的配置文件,所以报错</p><hr><h2 id="Cause-java-lang-IllegalStateException-Cannot-define-both-nestedQueryId-and-nestedResultMapId-in-property-dept"><a href="#Cause-java-lang-IllegalStateException-Cannot-define-both-nestedQueryId-and-nestedResultMapId-in-property-dept" class="headerlink" title="Cause: java.lang.IllegalStateException: Cannot define both nestedQueryId and nestedResultMapId in property dept"></a>Cause: java.lang.IllegalStateException: Cannot define both nestedQueryId and nestedResultMapId in property dept</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">resultMap</span>=<span class="string">"cn.qf.oa.dao.mapper.DeptMap"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">select</span>=<span class="string">"cn.qf.oa.dao.mapper.DeptDao.getDeptById"</span>       </span></span><br><span class="line"><span class="tag">             <span class="attr">column</span>=<span class="string">"deptid"</span> <span class="attr">javaType</span>=<span class="string">"Dept"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>把resultMap删掉</p><h2 id="解决com-github-pagehelper-PageInterceptor插件出现空指针问题"><a href="#解决com-github-pagehelper-PageInterceptor插件出现空指针问题" class="headerlink" title="解决com.github.pagehelper.PageInterceptor插件出现空指针问题"></a>解决com.github.pagehelper.PageInterceptor插件出现空指针问题</h2><p>在mybatis-config和application两个配置文件中同时配置了pagehelper,删掉一个</p><h2 id="A-query-was-run-and-no-Result-Maps-were-found-for-the-Mapped-Statement"><a href="#A-query-was-run-and-no-Result-Maps-were-found-for-the-Mapped-Statement" class="headerlink" title="A query was run and no Result Maps were found for the Mapped Statement"></a>A query was run and no Result Maps were found for the Mapped Statement</h2><p>使用mybatis进行查询时，没有给定resultType值出现的错误。resultType是查询对象的类型。</p><h2 id="方法修改-删除-后还是报同样的错误"><a href="#方法修改-删除-后还是报同样的错误" class="headerlink" title="方法修改 删除 后还是报同样的错误"></a>方法修改 删除 后还是报同样的错误</h2><p>把tomcat 的 deployment 中的war explored删掉,换成war</p><p>mlgb搞了一天</p><h2 id="Element-‘dependency’-cannot-have-character-children"><a href="#Element-‘dependency’-cannot-have-character-children" class="headerlink" title="Element ‘dependency’ cannot have character [children]"></a>Element ‘dependency’ cannot have character [children]</h2><p>问题：Element ‘dependency’ cannot have character [children],</p><p>原因：眼瞎</p><p>解决方法：看看你的特殊字符多写、少些、写错。</p><p>从别处复制 容易出现这个错误，好多情况下从网页上复制都会有多余的空格</p><h2 id="js闭包"><a href="#js闭包" class="headerlink" title="js闭包"></a>js闭包</h2><p>函数在调用过程中产生的一块临时的内存空间,外部访问不到,不会被全局污染.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;报错-Bean-must-be-of-‘org-apache-ibatis-plugin-Interceptor’-type&quot;&gt;&lt;a href=&quot;#报错-Bean-must-be-of-‘org-apache-ibatis-plugin-Interceptor’-type&quot; class=&quot;headerlink&quot; title=&quot;报错:Bean must be of ‘org.apache.ibatis.plugin.Interceptor’ type&quot;&gt;&lt;/a&gt;报错:Bean must be of ‘org.apache.ibatis.plugin.Interceptor’ type&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="error" scheme="http://yoursite.com/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>八皇后问题</title>
    <link href="http://yoursite.com/2019/10/19/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/10/19/八皇后问题/</id>
    <published>2019-10-19T07:43:36.000Z</published>
    <updated>2019-10-31T10:31:37.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>递归回溯问题</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">eightKing</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个8*8的数组作为棋盘</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] arry = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line">    <span class="comment">//方法个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//主方法，从第零行开始查找</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">findKing(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findKing</span><span class="params">(<span class="keyword">int</span> row)</span> </span>&#123;<span class="comment">//row是行数</span></span><br><span class="line">        <span class="comment">//当行数&gt;7时，即已经走完了最后一行(0-7行)，结果加1，打印结果，退出方法。</span></span><br><span class="line"><span class="keyword">if</span> (row &gt; <span class="number">7</span>) &#123;</span><br><span class="line">result++;</span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//i是列数。遍历检查第row行每一列，下面写了check方法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arry.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (check(row, i)) &#123;</span><br><span class="line">                <span class="comment">//如果检查通过(即当前位置没有同列，同斜线位置的棋子),将数组中该位置的值置为1</span></span><br><span class="line">arry[row][i] = <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//继续查找下一行</span></span><br><span class="line">findKing(row + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//如果下一行检查没有通过的位置，方法执行结束会返回到这里，这时将该位置改回0，防止脏读。</span></span><br><span class="line">arry[row][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//检查方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">check</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 检查同列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arry[i][y] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查左边。行列各减一即左对角线上的上一个位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = row-<span class="number">1</span>,j=y-<span class="number">1</span>; i &gt;=<span class="number">0</span>&amp;j&gt;=<span class="number">0</span>; i--,j--) &#123;</span><br><span class="line"><span class="keyword">if</span>(arry[i][j]==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//检查右边.行减一，列数加一即右对角线上的上一个位置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = row-<span class="number">1</span>,j=y+<span class="number">1</span>; i &gt;=<span class="number">0</span>&amp;j&lt;<span class="number">8</span>; i--,j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arry[i][j]==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//左右对角线及同列没有棋子，返回true</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"=====第"</span> + result + <span class="string">"种方案===="</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arry.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arry[i].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arry[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"第"</span> + i + <span class="string">"行，第"</span> + j + <span class="string">"列"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"=============================="</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一共92种方案。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h2&gt;&lt;p&gt;递归回溯问题&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>URI,URL,URN</title>
    <link href="http://yoursite.com/2019/10/19/URI-URL-URN/"/>
    <id>http://yoursite.com/2019/10/19/URI-URL-URN/</id>
    <published>2019-10-19T07:25:48.000Z</published>
    <updated>2019-10-31T11:11:46.492Z</updated>
    
    <content type="html"><![CDATA[<p>description: <strong>URI,URL,URN</strong></p><a id="more"></a><p>转载。 <a href="https://www.cnblogs.com/chengdabelief/p/6635045.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengdabelief/p/6635045.html</a> </p><blockquote><p>URI = Universal Resource Identifier 统一资源<strong>标志符</strong><br>URL = Universal Resource Locator 统一资源<strong>定位符</strong><br>URN = Universal Resource Name 统一资源<strong>名称</strong> </p></blockquote><p>/assets/img/20191019-1.png)</p><p> 也就是说，URI分为三种，URL or URN or （URL and URI） </p><p> URL代表资源的路径地址，而URI代表资源的名称。<br>通过URL找到资源是对网络位置进行标识，如： </p><ul><li><code>http://example.org/absolute/URI/with/absolute/path/to/resource.txt</code></li><li><code>ftp://example.org/resource.txt</code></li></ul><p>通过URI找到资源是通过对名称进行标识，这个名称在某命名空间 </p><p>中，并不代表网络地址，如：</p><ul><li><strong>urn:issn:1535-3613</strong> </li></ul><blockquote><p>“A Uniform Resource Identifier (URI) 是一个紧凑的字符串用来标示抽象或物理资源。”</p><p>“A URI 可以进一步被分为定位符、名字或两者都是. 术语“Uniform Resource Locator” (URL) 是URI的子集, 除了确定一个资源,还提供一种定位该资源的主要访问机制(如其网络“位置”)。“</p><p>“URI可以分为URL,URN或同时具备locators 和names特性的一个东西。URN作用就好像一个人的名字，URL就像一个人的地址。换句话说：URN确定了东西的身份，URL提供了找到它的方式。”</p><ul><li><p>首先，URL是URI的一种（通过那个图就看的出来吧）。所以有人跟你说URL不是URI，他就错了呗。但也不是所有的URI都是URL哦，就好像蝴蝶都会飞，但会飞的可不都是蝴蝶啊，你让苍蝇怎么想！</p></li><li><p>让URI能成为URL的当然就是那个“访问机制”，“网络位置”。e.g. <code>http://</code> or <code>ftp://</code>.。</p></li><li><p>URN是唯一标识的一部分，就是一个特殊的名字。</p></li></ul></blockquote><p>总结：</p><blockquote><p>当我们替代web地址的时候，URI和URL那个更准确？</p><p>基于我读的很多的文章，包括RFC，我想说URI更准确。</p><p>别急，我有我的理由：</p><p>我们经常使用的URI不是严格技术意义上的URL。例如：你需要的文件在<code>files.hp.com</code>. 这是URI，但不是URL–系统可能会对很多协议和端口都做出正确的反应。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;description: &lt;strong&gt;URI,URL,URN&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>quartz</title>
    <link href="http://yoursite.com/2019/10/18/quartz/"/>
    <id>http://yoursite.com/2019/10/18/quartz/</id>
    <published>2019-10-18T01:19:55.000Z</published>
    <updated>2019-10-18T07:42:05.407Z</updated>
    
    <content type="html"><![CDATA[<p>description: <strong>Quartz,定时任务</strong></p><a id="more"></a><h2 id="Quartz-定时任务"><a href="#Quartz-定时任务" class="headerlink" title="Quartz 定时任务"></a>Quartz 定时任务</h2><ul><li><p>场景：</p><ol><li><p>Quartz 工作原理：组成部分</p></li><li><p>使用简单的定时任务</p></li><li><p>动态任务管理</p></li><li><p>3个组件：</p><ol><li><p>job：要执行的任务，接口</p><p>自定义执行任务时，需要实现job接口    实现execute方法</p><p>下有系统实现类JobDetail，通过此类加载自定义的任务</p></li><li><p>trigger：触发器（什么时候执行任务）</p><p>下有两个子类 1)SimpleTrigger：不能精确到时分秒；  2)CronTrigger：自定义</p><p>Cron表达式：声明时间规则</p></li><li><p>Scheduler：调度器，把job任务和trigger触发器结合在一起</p></li></ol></li></ol><p>定时任务实际上是新开启的线程，如果没到执行的时间，线程sleep</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJob</span> <span class="keyword">implements</span> <span class="title">Job</span></span>&#123;</span><br><span class="line">    <span class="comment">//具体要执行的任务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">(JobExcutionContext context)</span> <span class="keyword">throws</span> JobExcutionException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello,quartz"</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSimpleJob</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.声明一个触发器</span></span><br><span class="line">        <span class="comment">//withIdentity("")给创建的触发器一个唯一的标识</span></span><br><span class="line">        <span class="comment">//withSchedule()在哪个调度器下工作，声明时间调度规则</span></span><br><span class="line">        <span class="comment">//withIntervalInSeconds(1)隔一秒后执行触发器</span></span><br><span class="line">        <span class="comment">//repeatFo规则：永远重复</span></span><br><span class="line">        <span class="comment">//stratNow()开始执行</span></span><br><span class="line">    Trigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">"test1018"</span>)</span><br><span class="line">    .withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">"0/5 12 11 18 10 ?"</span>))</span><br><span class="line">    .startNow().build();</span><br><span class="line">        <span class="comment">//2.创建要执行的任务，通过JobDetail类创建</span></span><br><span class="line">        JobDetail job = JobBuilder.newJob(MyJob.class).withIdentity(<span class="string">"myjob"</span>).build();</span><br><span class="line">        <span class="comment">//3.创建调度器：把触发器和任务（job）结合到一起。Scheduler是一个单例模式</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">            scheduler.scheduleJob(job,trigger);</span><br><span class="line">            <span class="comment">//开始调度</span></span><br><span class="line">            scheduler.start();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SchedulerException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"任务执行结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cron表达式"><a href="#Cron表达式" class="headerlink" title="Cron表达式"></a>Cron表达式</h2><ul><li>在触发器中声明复杂的时间规则需要使用Cron表达式</li><li>Cron表达式:生命时间的时间规则    <ul><li>秒 0-59</li><li>分 0-59</li><li>时 0-23</li><li>日 1-31</li><li>月 1-12 or JAN-DEC</li><li>周 1-7 or SUN-SAT</li><li>年 （年可以省略）empty or 1970-2099</li></ul></li><li>特殊符号：<ul><li>？任意值</li><li>，分隔符  19,20,21</li><li>- 范围 8-10</li><li>/ 增幅 0/5 从0开始，每次增加5</li><li>L 最后一个 日:最后一天，月:最后一月</li><li>W </li><li># </li></ul></li></ul><p>一般情况下 日期和星期写一个就可以，否则就是几号并且是周几的情况下执行</p><h2 id="动态定时任务"><a href="#动态定时任务" class="headerlink" title="动态定时任务"></a>动态定时任务</h2><ol><li>根据需要随时向现有的定时任务中添加新的定时任务</li><li>动态修改已存在的定时任务的时间规则</li><li>停止/恢复某个定时任务</li><li>删除某个定时任务</li></ol><h3 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzUtil</span> </span>&#123;</span><br><span class="line"><span class="comment">//声明静态的常量的调度工厂:获得调度器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SchedulerFactory factory = <span class="keyword">new</span> StdSchedulerFactory();</span><br><span class="line"><span class="comment">//动态添加任务</span></span><br><span class="line"><span class="comment">//参数:1.人物的的名字 2.任务所在组的名字 3.触发器的名字  4.触发器所在组的名字  5.任务类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(String jobName,String jobGroupName,</span></span></span><br><span class="line"><span class="function"><span class="params">String triggerName,String triggerGroupName,</span></span></span><br><span class="line"><span class="function"><span class="params">String cron,Class jobClass)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建触发器</span></span><br><span class="line">Trigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">.withIdentity(triggerName,triggerGroupName)</span><br><span class="line">.withSchedule(CronScheduleBuilder.cronSchedule(cron))</span><br><span class="line">.startNow().build();</span><br><span class="line">        <span class="comment">//2.创建要执行的任务，通过JobDetail类创建</span></span><br><span class="line">        JobDetail job = JobBuilder.newJob(jobClass).withIdentity(jobName,jobGroupName).build();</span><br><span class="line">        <span class="comment">//3.创建调度器：把触发器和任务（job）结合到一起。Scheduler是一个单例模式</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        Scheduler scheduler = factory.getScheduler();</span><br><span class="line">        System.out.println(scheduler);</span><br><span class="line">            scheduler.scheduleJob(job,trigger);</span><br><span class="line">            <span class="comment">//开始调度</span></span><br><span class="line">            scheduler.start();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SchedulerException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态修改已存在的定时任务的时间规则"><a href="#动态修改已存在的定时任务的时间规则" class="headerlink" title="动态修改已存在的定时任务的时间规则"></a>动态修改已存在的定时任务的时间规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态修改调度器中的任务，修改时间规则</span></span><br><span class="line"><span class="comment">//参数:1.新Cron表达式 2.触发器的名字 3.触发器所在组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateJob</span><span class="params">(String newCron, String triggerName, String triggerGroup)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.先获取调度器</span></span><br><span class="line">Scheduler scheduler = factory.getScheduler();</span><br><span class="line"><span class="comment">//2.创建一个TriggerKey,通过key到调度器中获取触发器</span></span><br><span class="line">TriggerKey triggerKey = <span class="keyword">new</span> TriggerKey(triggerName, triggerGroup);</span><br><span class="line"><span class="comment">//3.通过key到调度器中获取触发器</span></span><br><span class="line">CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);</span><br><span class="line"><span class="comment">//4.到触发器中获取到原有的Cron</span></span><br><span class="line">String oldCron = trigger.getCronExpression();</span><br><span class="line"><span class="comment">//5.判断是否一致</span></span><br><span class="line"><span class="keyword">if</span> (!oldCron.equals(newCron)) &#123;</span><br><span class="line"><span class="comment">//创建新触发器</span></span><br><span class="line">Trigger newTrigger =TriggerBuilder.newTrigger()</span><br><span class="line">                    .withIdentity(triggerName, triggerGroup)</span><br><span class="line">                    .withSchedule(CronScheduleBuilder.cronSchedule(newCron))</span><br><span class="line">                    .startNow().build();</span><br><span class="line"><span class="comment">//替换原有触发器</span></span><br><span class="line">scheduler.rescheduleJob(triggerKey, newTrigger);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除定时任务"><a href="#删除定时任务" class="headerlink" title="删除定时任务"></a>删除定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除定时任务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteJob</span><span class="params">(String jobName, String jobGroup, Sting triggerName, String triggerGroup)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获取调度器</span></span><br><span class="line">Scheduler scheduler = factory.getScheduler();</span><br><span class="line"><span class="comment">//声明TriggerKey</span></span><br><span class="line">TriggerKey triggerKey = <span class="keyword">new</span> TriggerKey(triggerName, triggerGroup);</span><br><span class="line"><span class="comment">//停止调度工作</span></span><br><span class="line">scheduler.pauseTrigger(triggerKey);</span><br><span class="line">scheduler.unscheduleJob(triggerKey);</span><br><span class="line"><span class="comment">//删除一个任务</span></span><br><span class="line">scheduler.deleteJob(JobKey.jobKey(jobName, jobGroup));</span><br><span class="line">&#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="暂停定时任务"><a href="#暂停定时任务" class="headerlink" title="暂停定时任务"></a>暂停定时任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暂停任务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pauseJob</span><span class="params">(String jobName,String jobGroup)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Scheduler scheduler = factory.getScheduler();</span><br><span class="line">JobKey jobKey = JobKey.jobKey(jobName,jobGroup);</span><br><span class="line">scheduler.pauseJob(jobKey);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="恢復定時任務"><a href="#恢復定時任務" class="headerlink" title="恢復定時任務"></a>恢復定時任務</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resumeJob</span><span class="params">(String jobName,String jobGroup)</span> </span>&#123;</span><br><span class="line">Scheduler scheduler;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">scheduler = factory.getScheduler();</span><br><span class="line">JobKey jobKey = JobKey.jobKey(jobName,jobGroup);</span><br><span class="line">scheduler.resumeJob(jobKey);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUtil</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//添加第一个任务</span></span><br><span class="line">QuartzUtil.addJob(<span class="string">"fjob"</span>, <span class="string">"jgroup"</span>, <span class="string">"tr1"</span>, <span class="string">"trgroup"</span>, <span class="string">"0/5 0/1 13 18 10 ?"</span>, MyJob.class);</span><br><span class="line"><span class="comment">//添加第二个任务</span></span><br><span class="line">QuartzUtil.addJob(<span class="string">"fjob2"</span>, <span class="string">"jgroup"</span>, <span class="string">"tr2"</span>, <span class="string">"trgroup"</span>, <span class="string">"0/1 0/1 13 18 10 ?"</span>, MyJob2.class);</span><br><span class="line"><span class="comment">//修改任务</span></span><br><span class="line">QuartzUtil.updateJob(<span class="string">"0/3 0/1 15 18 10 ?"</span>, <span class="string">"tr1"</span>, <span class="string">"trgroup"</span>);</span><br><span class="line">QuartzUtil.updateJob(<span class="string">"0/6 0/1 15 18 10 ?"</span>, <span class="string">"tr2"</span>, <span class="string">"trgroup"</span>);</span><br><span class="line"><span class="comment">//删除任务</span></span><br><span class="line">QuartzUtil.deleteJob(<span class="string">"fjob"</span>, <span class="string">"jgroup"</span>, <span class="string">"tr1"</span>, <span class="string">"trgroup"</span>);</span><br><span class="line">        <span class="comment">//暫停任務</span></span><br><span class="line">QuartzUtil.pauseJob(<span class="string">"fjob"</span>, <span class="string">"jgroup"</span>);</span><br><span class="line"><span class="comment">//恢復任務</span></span><br><span class="line">QuartzUtil.resumeJob(<span class="string">"fjob"</span>,<span class="string">"jgroup"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;description: &lt;strong&gt;Quartz,定时任务&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
